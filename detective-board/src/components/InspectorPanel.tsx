import React, { useMemo } from 'react';
import { useAppStore } from '../store';
import type { AnyNode, GroupNode, TaskNode, TaskStatus } from '../types';

export const InspectorPanel: React.FC = () => {
  const selection = useAppStore((s) => s.selection);
  const getNode = useAppStore((s) => s.getNode);
  const updateNode = useAppStore((s) => s.updateNode);
  const enterGroup = useAppStore((s) => s.enterGroup);

  const node = useMemo<AnyNode | undefined>(() => {
    if (selection.length !== 1) return undefined;
    return getNode(selection[0]);
  }, [selection, getNode]);

  if (!node) {
    return (
      <div className="inspector">
        <div className="inspector__title">–°–≤–æ–π—Å—Ç–≤–∞</div>
        <div className="inspector__empty">–ù–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è</div>
      </div>
    );
  }

  if (node.type === 'task') {
    const t = node as TaskNode;
    return (
      <div className="inspector">
        <div className="inspector__title">–ó–∞–¥–∞—á–∞</div>
        <label>
          –ó–∞–≥–æ–ª–æ–≤–æ–∫
          <input value={t.title} onChange={(e) => updateNode(t.id, { title: e.target.value })} />
        </label>
        <label>
          –û–ø–∏—Å–∞–Ω–∏–µ
          <textarea value={t.description || ''} onChange={(e) => updateNode(t.id, { description: e.target.value })} />
        </label>
        <label>
          –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Å–º–∞–π–ª)
          <input value={t.assigneeEmoji || ''} onChange={(e) => updateNode(t.id, { assigneeEmoji: e.target.value })} placeholder="üôÇ" />
        </label>
        <label>
          –ò–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
          <input value={t.assigneeName || ''} onChange={(e) => updateNode(t.id, { assigneeName: e.target.value })} placeholder="–ò–º—è" />
        </label>
        <label>
          –¶–≤–µ—Ç —Å—Ç–∏–∫–µ—Ä–∞
          <input type="color" value={(t.color || '#E8D8A6')} onChange={(e) => updateNode(t.id, { color: e.target.value })} />
        </label>
        <label>
          –°—Ä–æ–∫
          <input type="date" value={t.dueDate ? t.dueDate.slice(0, 10) : ''} onChange={(e) => updateNode(t.id, { dueDate: e.target.value ? new Date(e.target.value).toISOString() : undefined })} />
        </label>
        <label>
          –°—Ä–æ—á–Ω–æ—Å—Ç—å
          <select value={t.priority || 'med'} onChange={(e) => updateNode(t.id, { priority: e.target.value as any })}>
            <option value="low">–ù–∏–∑–∫–∞—è</option>
            <option value="med">–°—Ä–µ–¥–Ω—è—è</option>
            <option value="high">–í—ã—Å–æ–∫–∞—è</option>
          </select>
        </label>
        <label>
          –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)
          <input type="number" value={t.durationMinutes || 0} onChange={(e) => updateNode(t.id, { durationMinutes: Number(e.target.value) || undefined })} />
        </label>
        <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: 8 }}>
          <label>
            –®–∏—Ä–∏–Ω–∞
            <input type="number" min={80} max={1200} value={t.width} onChange={(e) => updateNode(t.id, { width: Math.max(80, Math.min(1200, Number(e.target.value))) })} />
          </label>
          <label>
            –í—ã—Å–æ—Ç–∞
            <input type="number" min={60} max={900} value={t.height} onChange={(e) => updateNode(t.id, { height: Math.max(60, Math.min(900, Number(e.target.value))) })} />
          </label>
        </div>
        <fieldset className="inspector__fieldset">
          <legend>–°—Ç–∞—Ç—É—Å</legend>
          <label className="radio">
            <input type="radio" name="status" checked={t.status === 'inactive'} onChange={() => updateNode(t.id, { status: 'inactive' as TaskStatus })} /> –ù–µ –∞–∫—Ç–∏–≤–Ω–∞
          </label>
          <label className="radio">
            <input type="radio" name="status" checked={t.status === 'in_progress'} onChange={() => updateNode(t.id, { status: 'in_progress' as TaskStatus })} /> –í –ø—Ä–æ—Ü–µ—Å—Å–µ
          </label>
          <label className="radio">
            <input type="radio" name="status" checked={t.status === 'done'} onChange={() => updateNode(t.id, { status: 'done' as TaskStatus })} /> –í—ã–ø–æ–ª–Ω–µ–Ω–∞
          </label>
        </fieldset>
      </div>
    );
  }

  const g = node as GroupNode;
  return (
    <div className="inspector">
      <div className="inspector__title">–ì—Ä—É–ø–ø–∞</div>
      <label>
        –ù–∞–∑–≤–∞–Ω–∏–µ
        <input value={g.name} onChange={(e) => updateNode(g.id, { name: e.target.value })} />
      </label>
      <label>
        –¶–≤–µ—Ç —à–∞—Ä–∞
        <input type="color" value={g.color || '#AEC6CF'} onChange={(e) => updateNode(g.id, { color: e.target.value })} />
      </label>
      <label>
        –†–∞–∑–º–µ—Ä (px)
        <input type="number" min={80} max={1200} value={g.width} onChange={(e) => {
          const size = Math.max(80, Math.min(1200, Number(e.target.value)));
          updateNode(g.id, { width: size, height: size });
        }} />
      </label>
      <button onClick={() => enterGroup(g.id)}>–û—Ç–∫—Ä—ã—Ç—å –≥—Ä—É–ø–ø—É</button>
    </div>
  );
};

export default InspectorPanel;
