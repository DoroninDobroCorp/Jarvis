import React, { useRef, useState } from 'react';
import { useAppStore } from '../store';
import { Link, useNavigate } from 'react-router-dom';
import { getLogger } from '../logger';
import { exportBackup, importBackup } from '../exportImport';
import AssistantModal from './AssistantModal';

const log = getLogger('Toolbar');

const ToolButton: React.FC<{
  active?: boolean;
  onClick?: () => void;
  title: string;
  children: React.ReactNode;
}> = ({ active, onClick, title, children }) => (
  <button
    className={`tool-btn ${active ? 'active' : ''}`}
    onClick={onClick}
    title={title}
    aria-label={title}
  >
    {children}
  </button>
);

export const Toolbar: React.FC = () => {
  const tool = useAppStore((s) => s.tool);
  const setTool = useAppStore((s) => s.setTool);
  const deleteSelection = useAppStore((s) => s.deleteSelection);
  const goUp = useAppStore((s) => s.goUp);
  const undo = useAppStore((s) => s.undo);
  const redo = useAppStore((s) => s.redo);
  const perfModeOverride = useAppStore((s) => s.perfModeOverride);
  const setPerfModeOverride = useAppStore((s) => s.setPerfModeOverride);
  const resetAll = useAppStore((s) => s.resetAll);
  const navigate = useNavigate();
  const fileRef = useRef<HTMLInputElement | null>(null);
  const [importMode, setImportMode] = useState<'replace' | 'merge'>('replace');
  const [importMenuOpen, setImportMenuOpen] = useState(false);
  const [assistantOpen, setAssistantOpen] = useState(false);
  const onPickFile = (mode: 'replace' | 'merge') => {
    setImportMode(mode);
    fileRef.current?.click();
  };
  const onFileChange: React.ChangeEventHandler<HTMLInputElement> = async (e) => {
    try {
      const f = e.target.files?.[0];
      if (!f) return;
      log.info('import:start', { name: f.name, size: f.size, mode: importMode });
      await importBackup(f, importMode);
      log.info('import:done', { mode: importMode });
      // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ —Ñ–∞–π–ª
      e.target.value = '';
      alert('–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω');
    } catch (err) {
      console.error(err);
      alert('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ' + (err instanceof Error ? err.message : String(err)));
    }
  };

  const toggle = (next: Parameters<typeof setTool>[0]) => {
    setTool(tool === next ? 'none' : next);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –≤–∏–¥–∞ –∫–∞–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ
  const viewport = useAppStore((s) => s.viewport);
  const currentParentId = useAppStore((s) => s.currentParentId);
  const saveStartCenter = () => {
    try {
      const cx = (window.innerWidth / 2 - viewport.x) / viewport.scale;
      const cy = (window.innerHeight / 2 - viewport.y) / viewport.scale;
      const payload = { x: Math.round(cx), y: Math.round(cy), scale: viewport.scale };
      const levelKey = currentParentId ?? '__ROOT__';
      // write per-level map
      try {
        const raw = localStorage.getItem('START_VIEW_BY_LEVEL');
        const map = raw ? (JSON.parse(raw) as Record<string, { x: number; y: number; scale?: number }>) : {};
        map[levelKey] = payload;
        localStorage.setItem('START_VIEW_BY_LEVEL', JSON.stringify(map));
      } catch {}
      // legacy for root
      if (levelKey === '__ROOT__') {
        localStorage.setItem('START_VIEW_CENTER', JSON.stringify(payload));
      }
      log.info('startViewCenter:saved', { levelKey, ...payload });
      alert('–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω');
    } catch (e) {
      console.error(e);
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–Ω—Ç—Ä');
    }
  };

  return (
    <div className="toolbar">
      <div className="tool-group">
        <ToolButton active={tool === 'add-task'} onClick={() => { log.debug('setTool', { to: 'add-task' }); toggle('add-task'); }} title="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É">üìù</ToolButton>
        <ToolButton active={tool === 'add-group'} onClick={() => { log.debug('setTool', { to: 'add-group' }); toggle('add-group'); }} title="–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É-—à–∞—Ä">üü¢</ToolButton>
        <ToolButton active={tool === 'add-person-employee'} onClick={() => { log.debug('setTool', { to: 'add-person-employee' }); toggle('add-person-employee'); }} title="–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞">üë§</ToolButton>
        <ToolButton active={tool === 'add-person-partner'} onClick={() => { log.debug('setTool', { to: 'add-person-partner' }); toggle('add-person-partner'); }} title="–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞">ü§ù</ToolButton>
        <ToolButton active={tool === 'add-person-bot'} onClick={() => { log.debug('setTool', { to: 'add-person-bot' }); toggle('add-person-bot'); }} title="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞">ü§ñ</ToolButton>
        <ToolButton active={tool === 'link'} onClick={() => { log.debug('setTool', { to: 'link' }); toggle('link'); }} title="–°–æ–µ–¥–∏–Ω–∏—Ç—å –Ω–∏—Ç–∫–æ–π">üßµ</ToolButton>
      </div>
      <div className="tool-group">
        <ToolButton onClick={() => { log.info('assistant:open'); setAssistantOpen(true); }} title="–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç (–∞—É–¥–∏–æ)">ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç</ToolButton>
        <ToolButton onClick={() => { log.info('deleteSelection:click'); void deleteSelection(); }} title="–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</ToolButton>
        <ToolButton onClick={() => { log.info('goUp:click'); goUp(); }} title="–í–≤–µ—Ä—Ö –ø–æ —É—Ä–æ–≤–Ω—é">‚¨ÜÔ∏è –ù–∞–∑–∞–¥</ToolButton>
      </div>
      <div className="tool-group">
        <Link to="/active" className="tool-link" title="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏" aria-label="–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏">üî• –ê–∫—Ç–∏–≤–Ω—ã–µ</Link>
        <Link to="/done" className="tool-link" style={{ marginLeft: 8 }} title="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏" aria-label="–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏">‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ</Link>
        <div style={{ marginLeft: 12 }}>
          <label style={{ color: 'var(--text)', marginRight: 6 }}>–î–æ–ø—Å—Ç—Ä–∞–Ω–∏—Ü—ã</label>
          <select aria-label="–î–æ–ø—Å—Ç—Ä–∞–Ω–∏—Ü—ã" onChange={(e) => { const v = e.target.value; if (v) { navigate(v); e.currentTarget.selectedIndex = 0; } }}>
            <option value="">‚Äî –≤—ã–±—Ä–∞—Ç—å ‚Äî</option>
            <option value="/books">–ö–Ω–∏–≥–∏</option>
            <option value="/movies">–§–∏–ª—å–º—ã</option>
            <option value="/games">–ò–≥—Ä—ã</option>
            <option value="/purchases">–ü–æ–∫—É–ø–∫–∏</option>
          </select>
        </div>
        <div style={{ marginLeft: 12 }}>
          <label style={{ color: 'var(--text)', marginRight: 6 }}>–†–µ–∂–∏–º</label>
          <select aria-label="–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" title="–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" value={perfModeOverride} onChange={(e) => setPerfModeOverride(e.target.value as 'auto' | 'perf' | 'super')}>
            <option value="auto">–ê–≤—Ç–æ</option>
            <option value="perf">–≠–∫–æ–Ω–æ–º</option>
            <option value="super">–°—É–ø–µ—Ä</option>
          </select>
        </div>
        <div style={{ marginLeft: 12, display: 'inline-flex', gap: 6 }}>
          <button className="tool-btn" title="–û—Ç–º–µ–Ω–∏—Ç—å (Cmd/Ctrl+Z)" onClick={() => { void undo(); }}>‚Ü∂ –û—Ç–º–µ–Ω–∏—Ç—å</button>
          <button className="tool-btn" title="–í–µ—Ä–Ω—É—Ç—å (Shift+Cmd/Ctrl+Z / Ctrl+Y)" onClick={() => { void redo(); }}>‚Ü∑ –í–µ—Ä–Ω—É—Ç—å</button>
          <button className="tool-btn" title="–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º" onClick={() => {
            if (!document.fullscreenElement) {
              void document.documentElement.requestFullscreen();
            } else {
              void document.exitFullscreen();
            }
          }}>‚õ∂ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ</button>
          <button className="tool-btn" title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É" onClick={() => { if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.')) { void resetAll(); } }}>üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
          <span style={{ width: 8 }} />
          <button className="tool-btn" title="–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON" onClick={() => { log.info('export:click'); void exportBackup(); }}>‚§ì –≠–∫—Å–ø–æ—Ä—Ç</button>
          <div style={{ position: 'relative', display: 'inline-block' }}>
            <button className="tool-btn" title="–ò–º–ø–æ—Ä—Ç / –ï—â—ë" onClick={() => setImportMenuOpen((v) => !v)}>‚ò∞ –ò–º–ø–æ—Ä—Ç/–ï—â—ë</button>
            {importMenuOpen ? (
              <div style={{ position: 'absolute', right: 0, top: '100%', background: '#222', color: '#fff', border: '1px solid #444', borderRadius: 6, padding: 8, minWidth: 220, zIndex: 1000, boxShadow: '0 6px 24px rgba(0,0,0,0.35)' }}>
                <button className="tool-btn" style={{ display: 'block', width: '100%' }} title="–ò–º–ø–æ—Ä—Ç (–∑–∞–º–µ–Ω–∞)" onClick={() => { onPickFile('replace'); setImportMenuOpen(false); }}>‚§í –ò–º–ø–æ—Ä—Ç (–∑–∞–º–µ–Ω–∞)</button>
                <button className="tool-btn" style={{ display: 'block', width: '100%', marginTop: 6 }} title="–ò–º–ø–æ—Ä—Ç (merge)" onClick={() => { onPickFile('merge'); setImportMenuOpen(false); }}>‚§í –ò–º–ø–æ—Ä—Ç (merge)</button>
                <div style={{ height: 1, background: '#444', margin: '6px 0' }} />
                <button className="tool-btn" style={{ display: 'block', width: '100%' }} title="–ó–∞–ø–æ–º–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä –≤–∏–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞" onClick={() => { saveStartCenter(); setImportMenuOpen(false); }}>üìç</button>
              </div>
            ) : null}
          </div>
          <input ref={fileRef} type="file" accept="application/json,.json" style={{ display: 'none' }} onChange={onFileChange} />
        </div>
      </div>
      {assistantOpen ? (<AssistantModal open={assistantOpen} onClose={() => setAssistantOpen(false)} />) : null}
    </div>
  );
};

export default Toolbar;
