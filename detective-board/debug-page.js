import puppeteer from 'puppeteer';

async function debugPage() {
  const browser = await puppeteer.launch({ headless: false });
  const page = await browser.newPage();
  
  console.log('üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–Ω–∏–≥...');
  await page.goto('http://localhost:5173/books');
  
  console.log('‚è≥ –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...');
  await new Promise(resolve => setTimeout(resolve, 5000));
  
  console.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
  
  const pageInfo = await page.evaluate(() => {
    const body = document.body.innerHTML;
    const allDivs = document.querySelectorAll('div');
    const allImages = document.querySelectorAll('img');
    const gridDivs = document.querySelectorAll('div[style*="grid"]');
    const borderDivs = document.querySelectorAll('div[style*="border"]');
    
    return {
      url: window.location.href,
      title: document.title,
      bodyLength: body.length,
      totalDivs: allDivs.length,
      totalImages: allImages.length,
      gridDivs: gridDivs.length,
      borderDivs: borderDivs.length,
      hasReactRoot: !!document.getElementById('root'),
      bodyPreview: body.substring(0, 500)
    };
  });
  
  console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
  console.log(`URL: ${pageInfo.url}`);
  console.log(`–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${pageInfo.title}`);
  console.log(`–†–∞–∑–º–µ—Ä body: ${pageInfo.bodyLength} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log(`–í—Å–µ–≥–æ div —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageInfo.totalDivs}`);
  console.log(`–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${pageInfo.totalImages}`);
  console.log(`Grid div —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageInfo.gridDivs}`);
  console.log(`Border div —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${pageInfo.borderDivs}`);
  console.log(`React root –Ω–∞–π–¥–µ–Ω: ${pageInfo.hasReactRoot}`);
  console.log(`\n–ü—Ä–µ–≤—å—é body:\n${pageInfo.bodyPreview}...`);
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
  console.log('\nüîß –ü—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞—É–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å...');
  
  const auditResult = await page.evaluate(async () => {
    if (window.__coverAudit) {
      try {
        const result = await window.__coverAudit(10, 2);
        return { success: true, result };
      } catch (error) {
        return { success: false, error: error.message };
      }
    } else {
      return { success: false, error: 'window.__coverAudit –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
  });
  
  console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞—É–¥–∏—Ç–∞:', auditResult);
  
  // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
  console.log('\n‚è≥ –ñ–¥–µ–º –µ—â–µ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞...');
  await new Promise(resolve => setTimeout(resolve, 10000));
  
  const finalCheck = await page.evaluate(() => {
    const items = document.querySelectorAll('div[style*="border: 1px solid #ddd"]');
    const itemsInfo = [];
    
    items.forEach((item, index) => {
      const img = item.querySelector('img');
      const titleEl = item.querySelector('div[style*="font-weight: 700"]');
      itemsInfo.push({
        index,
        hasImg: !!img,
        imgSrc: img ? img.src : null,
        title: titleEl ? titleEl.textContent : null
      });
    });
    
    return {
      totalItems: items.length,
      items: itemsInfo
    };
  });
  
  console.log('\nüìã –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:');
  console.log(`–ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${finalCheck.totalItems}`);
  finalCheck.items.forEach(item => {
    console.log(`${item.index + 1}. "${item.title}" - ${item.hasImg ? '–µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞' : '–Ω–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏'} - ${item.imgSrc ? item.imgSrc.substring(0, 50) + '...' : '–Ω–µ—Ç src'}`);
  });
  
  console.log('\nüîç –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
  console.log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É');
  
  // –û—Å—Ç–∞–≤–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç—ã–º
  await new Promise(() => {}); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
}

debugPage().catch(err => {
  console.error('–û—à–∏–±–∫–∞:', err);
  process.exit(1);
});
