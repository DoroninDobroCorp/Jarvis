import { test, expect } from '@playwright/test';

/**
 * –ü–†–û–°–¢–û–ô —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
 * –° —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
 */

test.setTimeout(30000); // 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º

test('–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Å FPS', async ({ page }) => {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...');
  
  // 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  const startTime = Date.now();
  await Promise.race([
    page.goto('http://localhost:5173'),
    new Promise((_, reject) => setTimeout(() => reject(new Error('Timeout loading page')), 10000))
  ]);
  
  await page.waitForLoadState('networkidle', { timeout: 5000 }).catch(() => {
    console.log('‚ö†Ô∏è networkidle timeout, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
  });
  
  await page.waitForTimeout(2000);
  console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞ ${Date.now() - startTime}ms`);

  // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ (–±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ)
  console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...');
  
  const taskId = await page.evaluate(async () => {
    const { useAppStore } = await import('../src/store');
    const addTask = useAppStore.getState().addTask;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞
    const id = await addTask({ x: 400, y: 300 });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await useAppStore.getState().updateNode(id, { 
      title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è' 
    });
    
    return id;
  });
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: ${taskId}`);

  // 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–ø—Ä–æ—Å—Ç–æ–π)
  await page.evaluate(() => {
    (window as any).__fps = [];
    (window as any).__dragStart = 0;
    
    let lastTime = performance.now();
    
    const measure = () => {
      const now = performance.now();
      if ((window as any).__dragStart > 0) {
        const fps = 1000 / (now - lastTime);
        (window as any).__fps.push(fps);
      }
      lastTime = now;
      requestAnimationFrame(measure);
    };
    
    measure();
  });

  console.log('üìä FPS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');

  // 4. –ù–∞—Ö–æ–¥–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏ –Ω–∞ canvas
  const taskInfo = await page.evaluate((id: string) => {
    const { useAppStore } = (window as any).__vitePreload?.useAppStore || 
                             require('../src/store');
    const state = useAppStore.getState();
    const task = state.nodes.find((n: any) => n.id === id);
    const viewport = state.viewport;
    
    if (!task) return null;
    
    const screenX = task.x * viewport.scale + viewport.x + task.width / 2;
    const screenY = task.y * viewport.scale + viewport.y + task.height / 2;
    
    return { screenX, screenY, width: task.width, height: task.height };
  }, taskId);

  if (!taskInfo) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏');
  }

  console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–∞–¥–∞—á–∏: x=${Math.round(taskInfo.screenX)}, y=${Math.round(taskInfo.screenY)}`);

  // 5. –ü–ï–†–ï–¢–ê–°–ö–ò–í–ê–ù–ò–ï!
  console.log('üñ±Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ...');
  
  await page.mouse.move(taskInfo.screenX, taskInfo.screenY);
  await page.waitForTimeout(100);
  
  // –°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  await page.evaluate(() => {
    (window as any).__dragStart = performance.now();
  });
  
  await page.mouse.down();
  await page.waitForTimeout(50);
  
  // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–ª–∞–≤–Ω–æ (20 —à–∞–≥–æ–≤ –ø–æ 16ms)
  const steps = 20;
  const deltaX = 200;
  const deltaY = 150;
  
  for (let i = 1; i <= steps; i++) {
    const progress = i / steps;
    const newX = taskInfo.screenX + deltaX * progress;
    const newY = taskInfo.screenY + deltaY * progress;
    
    await page.mouse.move(newX, newY);
    await page.waitForTimeout(16);
  }
  
  await page.mouse.up();
  await page.waitForTimeout(100);
  
  console.log('‚úÖ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

  // 6. –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
  const metrics = await page.evaluate(() => {
    const fps = (window as any).__fps || [];
    
    if (fps.length === 0) {
      return { avgFPS: 0, minFPS: 0, maxFPS: 0, count: 0 };
    }
    
    const avg = fps.reduce((a: number, b: number) => a + b, 0) / fps.length;
    const min = Math.min(...fps);
    const max = Math.max(...fps);
    
    return {
      avgFPS: Math.round(avg * 10) / 10,
      minFPS: Math.round(min * 10) / 10,
      maxFPS: Math.round(max * 10) / 10,
      count: fps.length,
    };
  });

  // 7. –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê');
  console.log('='.repeat(60));
  console.log(`üéØ –°—Ä–µ–¥–Ω–∏–π FPS:      ${metrics.avgFPS} ${metrics.avgFPS >= 55 ? '‚úÖ' : metrics.avgFPS >= 45 ? '‚ö†Ô∏è' : '‚ùå'}`);
  console.log(`üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π FPS:  ${metrics.minFPS} ${metrics.minFPS >= 45 ? '‚úÖ' : metrics.minFPS >= 30 ? '‚ö†Ô∏è' : '‚ùå'}`);
  console.log(`üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π FPS: ${metrics.maxFPS}`);
  console.log(`üé¨ –ò–∑–º–µ—Ä–µ–Ω–æ –∫–∞–¥—Ä–æ–≤:  ${metrics.count}`);
  console.log('‚îÄ'.repeat(60));
  
  let verdict = '';
  if (metrics.avgFPS >= 55 && metrics.minFPS >= 45) {
    verdict = 'üéâ –ò–î–ï–ê–õ–¨–ù–û! –ü–ª–∞–≤–Ω–æ—Å—Ç—å –∫–∞–∫ –º–∞—Å–ª–æ';
  } else if (metrics.avgFPS >= 45 && metrics.minFPS >= 30) {
    verdict = 'üëç –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å—Ç—å –º–∏–∫—Ä–æ–ª–∞–≥–∏';
  } else if (metrics.avgFPS >= 30) {
    verdict = 'üòê –ó–∞–º–µ—Ç–Ω—ã–µ –ª–∞–≥–∏, –Ω—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è';
  } else {
    verdict = 'üêå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –õ–ê–ì–ò!';
  }
  
  console.log(verdict);
  console.log('='.repeat(60) + '\n');

  // 8. –ü—Ä–æ–≤–µ—Ä–∫–∏
  expect(metrics.avgFPS, '–°—Ä–µ–¥–Ω–∏–π FPS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 40').toBeGreaterThanOrEqual(40);
  expect(metrics.minFPS, '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π FPS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å >= 25').toBeGreaterThanOrEqual(25);
  
  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
});
