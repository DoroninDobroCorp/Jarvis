import { test, expect } from '@playwright/test';

/**
 * –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è Detective Board
 * –ò–∑–º–µ—Ä—è—é—Ç FPS, –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞, –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ CPU
 * 
 * –ó–∞–ø—É—Å–∫: npm run test:perf
 */

test.describe('Performance Tests', () => {
  test.beforeEach(async ({ page }) => {
    // –í–∫–ª—é—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    await page.goto('http://localhost:5173?diag=1&log=info');
    await page.waitForLoadState('networkidle');
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    await page.waitForTimeout(1000);
  });

  test('FPS –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏ —É–∑–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å > 50', async ({ page }) => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    await page.keyboard.press('t'); // –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    await page.click('canvas', { position: { x: 400, y: 300 } });
    await page.waitForTimeout(100);

    // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ FPS
    const fpsData: number[] = [];
    
    await page.evaluate(() => {
      let lastTime = performance.now();
      let frameCount = 0;
      
      const measureFPS = () => {
        const now = performance.now();
        frameCount++;
        
        if (now >= lastTime + 1000) {
          const fps = Math.round((frameCount * 1000) / (now - lastTime));
          (window as any).__fps = fps;
          frameCount = 0;
          lastTime = now;
        }
        
        requestAnimationFrame(measureFPS);
      };
      
      measureFPS();
    });

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º —É–∑–µ–ª
    const canvas = await page.locator('canvas');
    await canvas.hover({ position: { x: 400, y: 300 } });
    
    await page.mouse.down();
    
    // –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞ 200px
    for (let i = 0; i < 20; i++) {
      await page.mouse.move(400 + i * 10, 300 + i * 5);
      await page.waitForTimeout(16); // ~60 FPS
      
      // –°–æ–±–∏—Ä–∞–µ–º FPS
      const fps = await page.evaluate(() => (window as any).__fps || 0);
      if (fps > 0) fpsData.push(fps);
    }
    
    await page.mouse.up();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const avgFPS = fpsData.reduce((a, b) => a + b, 0) / fpsData.length;
    const minFPS = Math.min(...fpsData);
    
    console.log(`üìä FPS –ø—Ä–∏ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏: avg=${Math.round(avgFPS)}, min=${minFPS}`);
    
    expect(avgFPS).toBeGreaterThan(50);
    expect(minFPS).toBeGreaterThan(40);
  });

  test('–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–∑–µ–ª < 50ms', async ({ page }) => {
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    await page.keyboard.press('t');
    await page.click('canvas', { position: { x: 400, y: 300 } });
    await page.waitForTimeout(100);

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞
    const startTime = Date.now();
    
    await page.click('canvas', { position: { x: 400, y: 300 } });
    
    // –ñ–¥–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è selection (visual feedback)
    await page.waitForFunction(() => {
      const canvas = document.querySelector('canvas');
      return canvas !== null;
    });
    
    const endTime = Date.now();
    const responseTime = endTime - startTime;
    
    console.log(`‚ö° –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–∏–∫: ${responseTime}ms`);
    
    expect(responseTime).toBeLessThan(50);
  });

  test('–†–∞–±–æ—Ç–∞ —Å–æ 100 —É–∑–ª–∞–º–∏ –±–µ–∑ –ø–∞–¥–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', async ({ page }) => {
    // –°–æ–∑–¥–∞–µ–º 100 –∑–∞–¥–∞—á –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    await page.evaluate(async () => {
      const { useAppStore } = await import('../src/store');
      const addTask = useAppStore.getState().addTask;
      
      const promises = [];
      for (let i = 0; i < 100; i++) {
        const x = (i % 10) * 200 + 100;
        const y = Math.floor(i / 10) * 150 + 100;
        promises.push(addTask({ x, y }));
      }
      
      await Promise.all(promises);
    });

    await page.waitForTimeout(500);

    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞
    const metrics = await page.evaluate(() => {
      const entries = performance.getEntriesByType('measure');
      return {
        renderTime: entries.length > 0 ? entries[entries.length - 1].duration : 0,
      };
    });

    console.log(`üé® –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∞ 100 —É–∑–ª–æ–≤: ${Math.round(metrics.renderTime)}ms`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–≤–Ω–æ—Å—Ç—å –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
    const canvas = await page.locator('canvas');
    await canvas.hover({ position: { x: 500, y: 400 } });
    
    const panStart = performance.now();
    await page.mouse.down();
    
    for (let i = 0; i < 10; i++) {
      await page.mouse.move(500 - i * 20, 400 - i * 10);
      await page.waitForTimeout(16);
    }
    
    await page.mouse.up();
    const panDuration = performance.now() - panStart;
    
    console.log(`üñ±Ô∏è –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ 100 —É–∑–ª–æ–≤: ${Math.round(panDuration)}ms`);
    
    // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–ª–∞–≤–Ω—ã–º (–±–ª–∏–∑–∫–æ –∫ 160ms –¥–ª—è 10 –∫–∞–¥—Ä–æ–≤ –ø—Ä–∏ 60fps)
    expect(panDuration).toBeLessThan(300);
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è memory leaks', async ({ page }) => {
    // –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const initialMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        return (performance as any).memory.usedJSHeapSize;
      }
      return 0;
    });

    // –°–æ–∑–¥–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —É–∑–ª—ã 10 —Ä–∞–∑
    for (let cycle = 0; cycle < 10; cycle++) {
      // –°–æ–∑–¥–∞–µ–º 20 —É–∑–ª–æ–≤
      await page.evaluate(async () => {
        const { useAppStore } = await import('../src/store');
        const addTask = useAppStore.getState().addTask;
        
        for (let i = 0; i < 20; i++) {
          await addTask({ x: 100 + i * 50, y: 100 });
        }
      });

      await page.waitForTimeout(100);

      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã
      await page.evaluate(async () => {
        const { useAppStore } = await import('../src/store');
        const nodes = useAppStore.getState().nodes;
        const removeNode = useAppStore.getState().removeNode;
        
        for (const node of nodes) {
          await removeNode(node.id);
        }
      });

      await page.waitForTimeout(100);
    }

    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const finalMemory = await page.evaluate(() => {
      if ('memory' in performance) {
        // –§–æ—Ä—Å–∏—Ä—É–µ–º GC –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if ((window as any).gc) (window as any).gc();
        return (performance as any).memory.usedJSHeapSize;
      }
      return 0;
    });

    if (initialMemory > 0 && finalMemory > 0) {
      const memoryGrowth = finalMemory - initialMemory;
      const growthMB = memoryGrowth / 1024 / 1024;
      
      console.log(`üíæ –†–æ—Å—Ç –ø–∞–º—è—Ç–∏: ${growthMB.toFixed(2)}MB`);
      
      // –†–æ—Å—Ç –ø–∞–º—è—Ç–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB
      expect(memoryGrowth).toBeLessThan(10 * 1024 * 1024);
    }
  });

  test('–ö–æ–Ω—Å–æ–ª—å –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', async ({ page }) => {
    const errors: string[] = [];
    const warnings: string[] = [];

    page.on('console', (msg) => {
      if (msg.type() === 'error') {
        errors.push(msg.text());
      } else if (msg.type() === 'warning') {
        warnings.push(msg.text());
      }
    });

    // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await page.keyboard.press('t');
    await page.click('canvas', { position: { x: 400, y: 300 } });
    await page.waitForTimeout(100);

    // –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–µ–º
    const canvas = await page.locator('canvas');
    await canvas.hover({ position: { x: 400, y: 300 } });
    await page.mouse.down();
    await page.mouse.move(500, 350);
    await page.mouse.up();

    console.log(`‚ùå Errors: ${errors.length}`);
    console.log(`‚ö†Ô∏è Warnings: ${warnings.length}`);

    if (errors.length > 0) {
      console.log('Errors:', errors);
    }

    expect(errors.length).toBe(0);
  });
});
