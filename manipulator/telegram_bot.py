import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

import config
from command_interpreter import CommandInterpreter
from task_executor import TaskExecutor
from logger_setup import setup_command_logger

logger = logging.getLogger(__name__)

class JarvisBot:
    def __init__(self):
        self.app = Application.builder().token(config.TELEGRAM_BOT_TOKEN).build()
        self.command_interpreter = CommandInterpreter()
        self.executor = TaskExecutor()
        
        # Handlers
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        self.app.add_handler(MessageHandler(filters.VOICE, self.handle_voice))
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Jarvis - —Ç–≤–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π, –∏ —è –≤—ã–ø–æ–ª–Ω—é –µ—ë –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä: '–í–∫–ª—é—á–∏ –Ω–∞–º –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –ö–ª–∏–Ω–∫–∞ —Ä–∞—Å—Å–µ–∫–∞—é—â–µ–≥–æ –¥–µ–º–æ–Ω–∞'"
        )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {user_text}")
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
        cmd_logger = setup_command_logger(user_text)
        cmd_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username or update.effective_user.id}")
        
        await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
            cmd_logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ Gemini –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è...")
            task_plan = await self.command_interpreter.understand_command(user_text)
            cmd_logger.info(f"–ü–ª–∞–Ω –æ—Ç Gemini: {task_plan}")
            
            await update.message.reply_text(f"‚úÖ –ü–æ–Ω—è–ª! –í—ã–ø–æ–ª–Ω—è—é:\n{task_plan}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            cmd_logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
            result = await self.executor.execute(task_plan, update)
            cmd_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            
            await update.message.reply_text(f"‚ú® –ì–æ—Ç–æ–≤–æ!\n{result}")
            cmd_logger.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}", exc_info=True)
            cmd_logger.error(f"–û–®–ò–ë–ö–ê: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    async def handle_voice(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üé§ –ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ (—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã —É–∑–Ω–∞–µ–º –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è)
        cmd_logger = setup_command_logger("voice_message")
        cmd_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.username or update.effective_user.id}")
        
        await update.message.reply_text("üéß –°–ª—É—à–∞—é...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = await update.message.voice.get_file()
            voice_path = os.path.join(config.TEMP_DIR, f"voice_{update.message.message_id}.ogg")
            await voice_file.download_to_drive(voice_path)
            cmd_logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {voice_path}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Gemini (–æ–Ω —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∞—É–¥–∏–æ)
            text = await self.command_interpreter.voice_to_text(voice_path)
            logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: {text}")
            cmd_logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(voice_path)
            
            await update.message.reply_text(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–ª: '{text}'\n\nü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            task_plan = await self.command_interpreter.understand_command(text)
            cmd_logger.info(f"–ü–ª–∞–Ω –æ—Ç Gemini: {task_plan}")
            await update.message.reply_text(f"‚úÖ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n{task_plan}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º
            cmd_logger.info("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...")
            result = await self.executor.execute(task_plan, update)
            cmd_logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result}")
            await update.message.reply_text(f"‚ú® –ì–æ—Ç–æ–≤–æ!\n{result}")
            cmd_logger.info("–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞: {e}", exc_info=True)
            cmd_logger.error(f"–û–®–ò–ë–ö–ê: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        self.app.run_polling(allowed_updates=Update.ALL_TYPES)
