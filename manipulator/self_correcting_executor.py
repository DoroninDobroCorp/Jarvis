"""
–°–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É—é—â–∏–π—Å—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–µ—Ä–µ–∑ Gemini Vision

–ö–ª—é—á–µ–≤–∞—è –∏–¥–µ—è: 
- –ü—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
- –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç + Gemini Vision
- –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å - –ø—Ä–æ–±—É–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
- –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏

–†–∞–±–æ—Ç–∞–µ—Ç —Å –õ–Æ–ë–´–ú –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –∑–∞–¥–∞—á–µ–π
"""
import asyncio
import logging
import os
import warnings
import google.generativeai as genai
from PIL import Image
import config
from screen_manager import ScreenManager

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ALTS warnings –æ—Ç Google API
warnings.filterwarnings('ignore', message='.*ALTS.*')
os.environ['GRPC_VERBOSITY'] = 'ERROR'
os.environ['GLOG_minloglevel'] = '2'

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini –¥–ª—è Vision
# –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û –º–æ–¥–µ–ª–∏ 2.5+ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ Vision)
genai.configure(api_key=config.GEMINI_API_KEY)
vision_model = genai.GenerativeModel('gemini-2.5-flash')

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
DETAILED_LOGGING = True

def log_vision_call(prompt: str, response: str, label: str = "Vision"):
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Vision –≤—ã–∑–æ–≤–æ–≤"""
    if DETAILED_LOGGING:
        print(f"\n{'='*70}")
        print(f"üîç {label} - –ó–ê–ü–†–û–° –ö GEMINI:")
        print(f"{'='*70}")
        print(prompt[:500] + ("..." if len(prompt) > 500 else ""))
        print(f"\n{'='*70}")
        print(f"üì• {label} - –û–¢–í–ï–¢ GEMINI:")
        print(f"{'='*70}")
        print(response[:500] + ("..." if len(response) > 500 else ""))
        print(f"{'='*70}\n")


class SelfCorrectingExecutor:
    """
    –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏ —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini Vision –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    """
    
    def __init__(self, screen_manager: 'ScreenManager' = None):
        if screen_manager:
            self.screen = screen_manager
        else:
            # Fallback: —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config
            import config
            self.screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
        self.max_attempts = 3
    
    async def ensure_app_active(self, app_name: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç
        
        Args:
            app_name: –ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (Spotify, Yandex, Terminal –∏ —Ç.–¥.)
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ
        """
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        check_script = '''
        tell application "System Events"
            set frontApp to name of first application process whose frontmost is true
            return frontApp
        end tell
        '''
        try:
            result = subprocess.run(['osascript', '-e', check_script], 
                                  capture_output=True, text=True, timeout=5)
            active_app = result.stdout.strip()
            
            if app_name.lower() in active_app.lower():
                logger.debug(f"‚úÖ {app_name} –∞–∫—Ç–∏–≤–µ–Ω")
                return True
            
            # –ï—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
            logger.info(f"‚ö†Ô∏è {app_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–∞–∫—Ç–∏–≤–µ–Ω: {active_app}). –ê–∫—Ç–∏–≤–∏—Ä—É—é...")
            activate_script = f'tell application "{app_name}" to activate'
            subprocess.run(['osascript', '-e', activate_script], timeout=5)
            await asyncio.sleep(1)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {app_name}: {e}")
            return False
    
    def _draw_point_with_rulers(self, img, x, y, point_radius=8, crop_size=500, zoom_factor=3):
        """
        –í—ã—Ä–µ–∑–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç, —Ä–∏—Å—É–µ—Ç –ª–∏–Ω–µ–π–∫–∏
        
        Args:
            img: PIL Image (–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω)
            x, y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏
            point_radius: —Ä–∞–¥–∏—É—Å —Ç–æ—á–∫–∏ –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            crop_size: —Ä–∞–∑–º–µ—Ä –≤—ã—Ä–µ–∑–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 500px = –æ–±–ª–∞—Å—Ç—å 1000x1000px)
            zoom_factor: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–≤–µ–ª–∏—á–∏—Ç—å
            
        Returns:
            PIL Image —Å —Ç–æ—á–∫–æ–π –∏ –ª–∏–Ω–µ–π–∫–∞–º–∏
        """
        from PIL import Image, ImageDraw
        
        width, height = img.size
        crop_x1 = max(0, x - crop_size)
        crop_y1 = max(0, y - crop_size)
        crop_x2 = min(width, x + crop_size)
        crop_y2 = min(height, y + crop_size)
        
        cropped = img.crop((crop_x1, crop_y1, crop_x2, crop_y2))
        crop_w, crop_h = cropped.size
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ –≤—ã—Ä–µ–∑–µ (–î–û —É–≤–µ–ª–∏—á–µ–Ω–∏—è)
        local_x = x - crop_x1
        local_y = y - crop_y1
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º
        zoomed_w = crop_w * zoom_factor
        zoomed_h = crop_h * zoom_factor
        zoomed = cropped.resize((zoomed_w, zoomed_h), Image.Resampling.LANCZOS)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        zoomed_x = local_x * zoom_factor
        zoomed_y = local_y * zoom_factor
        
        draw = ImageDraw.Draw(zoomed)
        
        # –ö—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞
        draw.ellipse([zoomed_x - point_radius, zoomed_y - point_radius,
                     zoomed_x + point_radius, zoomed_y + point_radius],
                    fill='red', outline='white', width=4)
        
        # –ñ–ï–õ–¢–ê–Ø –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞
        ruler_h_offset = 50
        ruler_h_y = zoomed_y + ruler_h_offset
        draw.line([(0, ruler_h_y), (zoomed_w, ruler_h_y)], fill='yellow', width=4)
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–µ–π–∫–∏
        for real_offset in range(-crop_size, crop_size + 1, 10):
            tick_x = zoomed_x + (real_offset * zoom_factor)
            if tick_x < 0 or tick_x > zoomed_w:
                continue
            tick_y = ruler_h_y
            
            if real_offset % 50 == 0:  # –î–ª–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                draw.line([(tick_x, tick_y - 20), (tick_x, tick_y + 20)], fill='yellow', width=4)
                label = f"{real_offset:+d}" if real_offset != 0 else "0"
                text_y = tick_y + 30 if tick_y < zoomed_h / 2 else tick_y - 45
                draw.text((tick_x - 25, text_y), label, fill='yellow')
            else:  # –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ—Ç–∫–∞
                draw.line([(tick_x, tick_y - 10), (tick_x, tick_y + 10)], fill='yellow', width=3)
        
        # –ì–û–õ–£–ë–ê–Ø –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞
        ruler_v_offset = 50
        ruler_v_x = zoomed_x + ruler_v_offset
        draw.line([(ruler_v_x, 0), (ruler_v_x, zoomed_h)], fill='cyan', width=4)
        
        # –ú–µ—Ç–∫–∏ –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–µ–π–∫–∏
        for real_offset in range(-crop_size, crop_size + 1, 10):
            tick_y = zoomed_y + (real_offset * zoom_factor)
            if tick_y < 0 or tick_y > zoomed_h:
                continue
            tick_x = ruler_v_x
            
            if real_offset % 50 == 0:  # –î–ª–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
                draw.line([(tick_x - 20, tick_y), (tick_x + 20, tick_y)], fill='cyan', width=4)
                label = f"{real_offset:+d}" if real_offset != 0 else "0"
                text_x = tick_x + 30 if tick_x < zoomed_w / 2 else tick_x - 70
                draw.text((text_x, tick_y - 12), label, fill='cyan')
            else:  # –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ—Ç–∫–∞
                draw.line([(tick_x - 10, tick_y), (tick_x + 10, tick_y)], fill='cyan', width=3)
        
        # –ò–Ω—Ñ–æ –≤ —É–≥–ª—É
        draw.text((10, 10), f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})", fill='white')
        draw.text((10, 35), f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ: x{zoom_factor}", fill='white')
        draw.text((10, 60), f"–õ–∏–Ω–µ–π–∫–∏: —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏", fill='white')
        
        return zoomed
    
    async def identify_active_app(self, screenshot_path: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (YouTube, Spotify, Safari, etc)
        """
        try:
            img_file = genai.upload_file(screenshot_path)
            
            prompt = """–û–ø—Ä–µ–¥–µ–ª–∏ –∫–∞–∫–æ–µ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –∏–ª–∏ –°–ê–ô–¢ —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —ç—Ç–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ.

–û—Ç–≤–µ—Ç—å –û–î–ù–ò–ú –°–õ–û–í–û–ú –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Å–∞–π—Ç–∞:
- "YouTube" - –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç YouTube
- "Spotify" - –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç Spotify (–¥–µ—Å–∫—Ç–æ–ø–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
- "Safari" - –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä Safari
- "Chrome" - –µ—Å–ª–∏ –±—Ä–∞—É–∑–µ—Ä Chrome
- "Yandex" - –µ—Å–ª–∏ –Ø–Ω–¥–µ–∫—Å.–ë—Ä–∞—É–∑–µ—Ä
- "Terminal" - –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª
- "–î—Ä—É–≥–æ–µ" - –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

            response = vision_model.generate_content([prompt, img_file])
            app_name = response.text.strip()
            
            log_vision_call(prompt, app_name, "identify_app")
            
            return app_name
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    async def verify_task_completion(self, screenshot_path: str, task_description: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ Gemini Vision
        
        Args:
            screenshot_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            dict: {
                'completed': bool,
                'explanation': str,
                'next_action': str  # —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
            }
        """
        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini Vision: {task_description}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            img_file = genai.upload_file(screenshot_path)
            
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:

–ó–ê–î–ê–ß–ê: {task_description}

–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ? 

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{{
    "completed": true/false,
    "explanation": "—á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ",
    "next_element": "–ö–û–ù–ö–†–ï–¢–ù–´–ô UI-—ç–ª–µ–º–µ–Ω—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å (–µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)"
}}

–í–ê–ñ–ù–û –¥–ª—è next_element:
- –£–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: "–ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π –ª—É–ø—ã", "–∫–Ω–æ–ø–∫–∞ Play –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –ø–ª–µ–µ—Ä–∞"
- –ù–ï –ø—Ä–æ—Å—Ç–æ "–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞", –∞ "–ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"
- –ù–ï "–ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", –∞ "–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∏–¥–µ–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞"
- –£–∫–∞–∑—ã–≤–∞–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: "–≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏", "–≤ –ª–µ–≤–æ–π –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏", "–≤ —Ü–µ–Ω—Ç—Ä–µ —ç–∫—Ä–∞–Ω–∞"

–ü—Ä–∏–º–µ—Ä—ã:
- –ó–∞–¥–∞—á–∞ "–Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ" ‚Üí completed: false ‚Üí next_element: "–ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ (—Å–ø—Ä–∞–≤–∞ –æ—Ç –ª–æ–≥–æ—Ç–∏–ø–∞)"
- –ó–∞–¥–∞—á–∞ "–≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É" ‚Üí completed: false ‚Üí next_element: "—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Play –≤ –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –ø–ª–µ–µ—Ä–∞"
- –ó–∞–¥–∞—á–∞ "–ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º" ‚Üí completed: false ‚Üí next_element: "–∫–Ω–æ–ø–∫–∞ fullscreen –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞"

–ë—É–¥—å —Å—Ç—Ä–æ–≥: completed=true —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –¢–û–ß–ù–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."""

            response = vision_model.generate_content([prompt, img_file])
            result_text = response.text.strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤
            log_vision_call(prompt, result_text, "verify_task")
            
            # –ü–∞—Ä—Å–∏–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            import json
            import re
            
            # –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
            json_match = re.search(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', result_text)
            if json_match:
                result = json.loads(json_match.group())
            else:
                # Fallback - –ø–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
                result = {
                    'completed': 'completed: true' in result_text.lower() or '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞' in result_text.lower(),
                    'explanation': result_text[:200],
                    'next_element': '—ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞'
                }
            
            logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ Vision: {e}")
            return {
                'completed': False,
                'explanation': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}',
                'next_element': '—ç–ª–µ–º–µ–Ω—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–æ—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è)'
            }
    
    async def find_element_coordinates(self, screenshot_path: str, element_description: str, monitor_region: str = None) -> dict:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ —á–µ—Ä–µ–∑ Gemini Vision —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º —É—Ç–æ—á–Ω–µ–Ω–∏–µ–º
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–µ–∫ –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        Args:
            screenshot_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            element_description: –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞")
            monitor_region: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–µ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            
        Returns:
            dict: {
                'found': bool,
                'x': int,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞  
                'y': int,
                'confidence': str,
                'explanation': str
            }
        """
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º—É —Å–µ—Ç–∫–∏

        Args:
            screenshot_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            element_description: –û–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "–∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞")

        Returns:
            dict: {
                'found': bool,
                'x': int,  # –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
                'y': int,
                'confidence': str
            }
        """
        logger.info(f"üîç –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å –ª–∏–Ω–µ–π–∫–∞–º–∏: {element_description}")

        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            from PIL import Image, ImageDraw
            import re
            
            original = Image.open(screenshot_path).convert('RGB')
            width, height = original.size
            logger.info(f"üìê –†–∞–∑–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {width}x{height}")
            
            # –®–ê–ì 1: –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            logger.info(f"üìç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è: {element_description}")
            
            initial_prompt = f'''–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞–π–¥–∏: {element_description}

–í–ê–ñ–ù–û:
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0, 0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –õ–ï–í–û–ú –í–ï–†–•–ù–ï–ú —É–≥–ª—É
- X —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ü–†–ê–í–û (–æ—Ç 0 –¥–æ {width})
- Y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ù–ò–ó (–æ—Ç 0 –¥–æ {height})

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X Y
–û–ø–∏—Å–∞–Ω–∏–µ: –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç

–ü—Ä–∏–º–µ—Ä:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 520 1650
–û–ø–∏—Å–∞–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏'''
            
            response = vision_model.generate_content([initial_prompt, original])
            answer = response.text.strip()
            logger.debug(f"üì• –û—Ç–≤–µ—Ç Gemini: {answer[:200]}...")
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords_match = re.search(r'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\s*(\d+)\s+(\d+)', answer)
            if not coords_match:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                return {
                    'found': False,
                    'x': 0,
                    'y': 0,
                    'confidence': '–Ω–∏–∑–∫–∞—è',
                    'explanation': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'
                }
            
            current_x = int(coords_match.group(1))
            current_y = int(coords_match.group(2))
            logger.info(f"‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({current_x}, {current_y})")
            
            # –®–ê–ì 2: –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å –ª–∏–Ω–µ–π–∫–∞–º–∏ (–º–∞–∫—Å 5 –∏—Ç–µ—Ä–∞—Ü–∏–π)
            # –í—ã—Ä–µ–∑–∞–µ—Ç—Å—è –æ–±–ª–∞—Å—Ç—å 1000x1000px (500px –≤ –∫–∞–∂–¥—É—é —Å—Ç–æ—Ä–æ–Ω—É), —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –≤ 3 —Ä–∞–∑–∞
            max_iterations = 5
            for iteration in range(1, max_iterations + 1):
                logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}/{max_iterations}: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç ({current_x}, {current_y})")
                
                # –†–∏—Å—É–µ–º —Ç–æ—á–∫—É + –ª–∏–Ω–µ–π–∫–∏ (–æ–±–ª–∞—Å—Ç—å 1000x1000px –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏)
                point_img = self._draw_point_with_rulers(original, current_x, current_y)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                import time
                iter_path = f'screenshots/ruler_iter{iteration}_{int(time.time())}.png'
                point_img.save(iter_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
                verify_prompt = f'''–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –§–†–ê–ì–ú–ï–ù–¢ —ç–∫—Ä–∞–Ω–∞.

–ö–†–ê–°–ù–ê–Ø –¢–û–ß–ö–ê —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ({current_x}, {current_y}).

–õ–ò–ù–ï–ô–ö–ò:
- –ñ–ï–õ–¢–ê–Ø –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è - –Ω–∏–∂–µ —Ç–æ—á–∫–∏ (0 = —Ç–æ—á–∫–∞)
- –ì–û–õ–£–ë–ê–Ø –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è - —Å–ø—Ä–∞–≤–∞ –æ—Ç —Ç–æ—á–∫–∏ (0 = —Ç–æ—á–∫–∞)  
- –ú–µ—Ç–∫–∏ –∫–∞–∂–¥—ã–µ 10-50 –†–ï–ê–õ–¨–ù–´–• –ø–∏–∫—Å–µ–ª–µ–π

–ó–ê–î–ê–ß–ê: –ì–ê–†–ê–ù–¢–ò–†–£–ï–¢ –ª–∏ –∫–ª–∏–∫ –ø–æ —ç—Ç–æ–π —Ç–æ—á–∫–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ "{element_description}"?

üéØ –ö–†–ò–¢–ï–†–ò–ô –£–°–ü–ï–•–ê:
- –¢–æ—á–∫–∞ –ù–ï –æ–±—è–∑–∞–Ω–∞ –±—ã—Ç—å –≤ —Ü–µ–Ω—Ç—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞!
- –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ø–æ–ø–∞–¥–∞–µ—Ç –í –û–ë–õ–ê–°–¢–¨ —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–∞–∂–µ —Å –∫—Ä–∞—é) - —ç—Ç–æ –î–û–°–¢–ê–¢–û–ß–ù–û
- –û—Ç–≤–µ—Ç—å –í–ï–†–ù–ê, –µ—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —Ç–æ—á–∫–µ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
- –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –ø—Ä–æ–º–∞—Ö–∞

‚ö†Ô∏è –í–ê–ñ–ù–û: –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –ù–ï–¢ –Ω–∞ —ç—Ç–æ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ –≤–æ–æ–±—â–µ - –Ω–∞–ø–∏—à–∏ "–≠–ª–µ–º–µ–Ω—Ç –ù–ï –í–ò–î–ï–ù –ù–ê –§–†–ê–ì–ú–ï–ù–¢–ï"

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:

1) –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –ù–ï–¢ –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ:
–≠–ª–µ–º–µ–Ω—Ç –ù–ï –í–ò–î–ï–ù –ù–ê –§–†–ê–ì–ú–ï–ù–¢–ï

2) –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –ü–û–ü–ê–î–ê–ï–¢ –≤ –æ–±–ª–∞—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–∞–∂–µ —Å –∫—Ä–∞—é):
–¢–æ—á–∫–∞: –í–ï–†–ù–ê

3) –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –µ—Å—Ç—å –†–ï–ê–õ–¨–ù–´–ô —Ä–∏—Å–∫ –ø—Ä–æ–º–∞—Ö–∞ - —É–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é:
–¢–æ—á–∫–∞: –ù–ï –í–ï–†–ù–ê
–°–¥–≤–∏–≥ X: [—á–∏—Å–ª–æ]
–°–¥–≤–∏–≥ Y: [—á–∏—Å–ª–æ]
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –ø–æ—á–µ–º—É —Ç–æ—á–∫–∞ –ø—Ä–æ–º–∞—Ö–Ω–µ—Ç—Å—è

–ü—Ä–∞–≤–∏–ª–∞ —Å–¥–≤–∏–≥–∞:
- –≠–ª–µ–º–µ–Ω—Ç –°–ü–†–ê–í–ê ‚Üí X –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (+)
- –≠–ª–µ–º–µ–Ω—Ç –°–õ–ï–í–ê ‚Üí X –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (-)
- –≠–ª–µ–º–µ–Ω—Ç –ù–ò–ñ–ï ‚Üí Y –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π (+)
- –≠–ª–µ–º–µ–Ω—Ç –í–´–®–ï ‚Üí Y –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π (-)'''
                
                verify_response = vision_model.generate_content([verify_prompt, point_img])
                verify_answer = verify_response.text.strip()
                logger.debug(f"üì• –ü—Ä–æ–≤–µ—Ä–∫–∞: {verify_answer[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º - –≤–∏–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
                if '–ù–ï –í–ò–î–ï–ù –ù–ê –§–†–ê–ì–ú–ï–ù–¢–ï' in verify_answer.upper() or '–ù–ï –í–ò–î–ï–ù' in verify_answer.upper():
                    logger.warning(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –≤–∏–¥–µ–Ω –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞—é—Å—å –∫ –ø–æ–ª–Ω–æ–º—É —Å–∫—Ä–∏–Ω—à–æ—Ç—É")
                    # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Å –ø–æ–ª–Ω—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
                    logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–∞ –ø–æ–ª–Ω–æ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–µ")
                    
                    retry_prompt = f'''–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞–π–¥–∏: {element_description}

–í–ê–ñ–ù–û:
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0, 0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –õ–ï–í–û–ú –í–ï–†–•–ù–ï–ú —É–≥–ª—É
- X —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ü–†–ê–í–û (–æ—Ç 0 –¥–æ {width})
- Y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ù–ò–ó (–æ—Ç 0 –¥–æ {height})

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X Y
–û–ø–∏—Å–∞–Ω–∏–µ: –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç

–ü—Ä–∏–º–µ—Ä:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 520 1650
–û–ø–∏—Å–∞–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏'''
                    
                    retry_response = vision_model.generate_content([retry_prompt, original])
                    retry_answer = retry_response.text.strip()
                    logger.debug(f"üì• –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {retry_answer[:200]}...")
                    
                    retry_match = re.search(r'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\s*(\d+)\s+(\d+)', retry_answer)
                    if retry_match:
                        current_x = int(retry_match.group(1))
                        current_y = int(retry_match.group(2))
                        logger.info(f"‚úÖ –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: ({current_x}, {current_y})")
                        continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ø–æ–ª–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
                        break
                
                # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if '–í–ï–†–ù–ê' in verify_answer and '–ù–ï –í–ï–†–ù–ê' not in verify_answer:
                    logger.info(f"‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}")
                    return {
                        'found': True,
                        'x': current_x,
                        'y': current_y,
                        'confidence': '–≤—ã—Å–æ–∫–∞—è',
                        'explanation': f'–ù–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ {iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π —É—Ç–æ—á–Ω–µ–Ω–∏—è'
                    }
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–¥–≤–∏–≥–∏
                x_match = re.search(r'–°–¥–≤–∏–≥ X:\s*([+-]?\d+)', verify_answer)
                y_match = re.search(r'–°–¥–≤–∏–≥ Y:\s*([+-]?\d+)', verify_answer)
                
                if x_match and y_match:
                    delta_x = int(x_match.group(1))
                    delta_y = int(y_match.group(1))
                    logger.info(f"üìê –ö–æ—Ä—Ä–µ–∫—Ü–∏—è: X{delta_x:+d}, Y{delta_y:+d}")
                    
                    current_x += delta_x
                    current_y += delta_y
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    current_x = max(0, min(width, current_x))
                    current_y = max(0, min(height, current_y))
                    logger.info(f"‚û°Ô∏è –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({current_x}, {current_y})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–¥–≤–∏–≥–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∏—Ç–µ—Ä–∞—Ü–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Ç–µ—Ä–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
            return {
                'found': True,
                'x': current_x,
                'y': current_y,
                'confidence': '—Å—Ä–µ–¥–Ω—è—è',
                'explanation': f'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ—Å–ª–µ {max_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π'
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}", exc_info=True)
            return {
                'found': False,
                'x': 0,
                'y': 0,
                'confidence': '–Ω–∏–∑–∫–∞—è',
                'explanation': str(e)
            }
    
    async def execute_with_self_correction(self, 
                                          task_description: str,
                                          primary_method,
                                          search_query: str = None) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å —Å–∞–º–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π
        
        Args:
            task_description: –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            primary_method: –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ (async —Ñ—É–Ω–∫—Ü–∏—è)
            search_query: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –µ—Å–ª–∏ Vision –Ω–∞–π–¥–µ—Ç –ø–æ–ª–µ –≤–≤–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            
        –ü—Ä–∏–º–µ—Ä:
            await executor.execute_with_self_correction(
                task_description="–í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω",
                primary_method=lambda: –∑–∞–ø—É—Å—Ç–∏—Ç—å_–≤–∏–¥–µ–æ(),
                search_query="–∫–ª–∏–Ω–æ–∫ demon slayer"
            )
            
        –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –∫–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞—Ç—å –µ—Å–ª–∏ primary –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
        """
        for attempt in range(1, self.max_attempts + 1):
            print(f"\n{'='*70}")
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempt}/{self.max_attempts}")
            print(f"{'='*70}")
            
            # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
            print(f"   ‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é –¥–µ–π—Å—Ç–≤–∏–µ...")
            try:
                await primary_method()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
            
            await asyncio.sleep(2)  # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–∫–ª–∏–∫
            
            # 2. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            print(f"   üì∏ –°–æ–∑–¥–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
            screenshot_path = self.screen.capture_secondary_monitor()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Gemini Vision
            print(f"   üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ Gemini Vision...")
            verification = await self.verify_task_completion(screenshot_path, task_description)
            
            print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {verification['explanation']}")
            
            if verification['completed']:
                print(f"\n‚úÖ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ {attempt}")
                return True
            
            # 4. –ï—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –µ—Å—Ç—å –µ—â—ë –ø–æ–ø—ã—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º next_element –æ—Ç Gemini
            if attempt < self.max_attempts:
                next_element = verification.get('next_element', '')
                
                if next_element and '–æ—à–∏–±–∫–∞' not in next_element.lower():
                    print(f"   ‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...")
                    print(f"   üéØ Gemini —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç: {next_element}")
                    
                    await asyncio.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ Vision –∑–∞–ø—Ä–æ—Å–æ–º
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏
                    if 'spotify' in task_description.lower():
                        await self.ensure_app_active('Spotify')
                    elif 'youtube' in task_description.lower() or '–≤–∏–¥–µ–æ' in task_description.lower():
                        await self.ensure_app_active('Yandex')
                    
                    monitor_info = self.screen.get_secondary_monitor_info()
                    element = await self.find_element_coordinates(screenshot_path, next_element, monitor_info)
                    
                    # confidence —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞: '–≤—ã—Å–æ–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è', '–Ω–∏–∑–∫–∞—è'
                    confidence_ok = element.get('confidence', '–Ω–∏–∑–∫–∞—è') in ['–≤—ã—Å–æ–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è']
                    if element['found'] and confidence_ok:
                        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω! Confidence: {element['confidence']}")
                        print(f"   üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X={element['x']}, Y={element['y']}")
                        print(f"   üí≠ Gemini –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: {element.get('explanation', '–Ω–µ—Ç')}")
                        print(f"   üñ±Ô∏è  –ö–ª–∏–∫–∞—é...")
                        self.screen.click_at(element['x'], element['y'], force=True)
                        await asyncio.sleep(1)
                        
                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ò –µ—Å—Ç—å search_query - –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å
                        is_input_field = any(keyword in next_element.lower() for keyword in 
                                           ['–ø–æ–ª–µ', '–≤–≤–æ–¥', 'search', '–∞–¥—Ä–µ—Å', '—Å—Ç—Ä–æ–∫–∞', 'input'])
                        
                        if search_query and is_input_field:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ß–¢–û –∏–º–µ–Ω–Ω–æ –≤–≤–æ–¥–∏—Ç—å
                            print(f"   ü§î –û–ø—Ä–µ–¥–µ–ª—è—é —á—Ç–æ –≤–≤–æ–¥–∏—Ç—å –≤ –ø–æ–ª–µ...")
                            
                            prompt = f"""–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏:
{search_query}

–û–ø—Ä–µ–¥–µ–ª–∏ –¢–û–ß–ù–´–ô —Ç–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞ –≤ –ø–æ–ª–µ "{next_element}".

–ü—Ä–∞–≤–∏–ª–∞:
- –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª/–≤–∏–¥–µ–æ/–º—É–∑—ã–∫—É - –≤–µ—Ä–Ω–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
- –ï—Å–ª–∏ –Ω—É–∂–µ–Ω URL - –≤–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π URL
- –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –≤–µ—Ä–Ω–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å
- –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –≤–≤–æ–¥–∞, –±–µ–∑ JSON, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""

                            response = vision_model.generate_content(prompt)
                            text_to_type = response.text.strip().replace('"', '').replace("'", '')
                            
                            print(f"   ‚å®Ô∏è  –í–≤–æ–∂—É —Ç–µ–∫—Å—Ç: {text_to_type}")
                            import subprocess
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è AppleScript
                            safe_text = text_to_type.replace('\\', '\\\\').replace('"', '\\"')
                            script = f'''
                            tell application "System Events"
                                keystroke "{safe_text}"
                                delay 2
                                keystroke return
                                delay 1
                            end tell
                            '''
                            subprocess.run(['osascript', '-e', script], timeout=10)
                            print(f"   ‚è≥ –ñ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
                            await asyncio.sleep(3)
                            
                            # –î–µ–ª–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                            print(f"   üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞...")
                            new_screenshot = self.screen.capture_secondary_monitor()
                            
                            print(f"   üîç –ò—â—É –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞...")
                            await asyncio.sleep(2)
                            monitor_info = self.screen.get_secondary_monitor_info()
                            first_result = await self.find_element_coordinates(
                                new_screenshot,
                                "–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Ç—Ä–µ–∫–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ (–Ω–µ —Ä–µ–∫–ª–∞–º–∞, –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç)",
                                monitor_info
                            )
                            
                            confidence_ok = first_result.get('confidence', '–Ω–∏–∑–∫–∞—è') in ['–≤—ã—Å–æ–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è']
                            if first_result['found'] and confidence_ok:
                                print(f"   ‚úÖ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω!")
                                
                                # –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Retina
                                from coordinate_correction import correct_click_coordinates
                                corrected_x, corrected_y, scale = correct_click_coordinates(
                                    first_result['x'], first_result['y'], 
                                    monitor_info, 
                                    new_screenshot
                                )
                                print(f"   üìê –ö–æ—Ä—Ä–µ–∫—Ü–∏—è: scale={scale}x ‚Üí –∫–ª–∏–∫ –Ω–∞ ({corrected_x}, {corrected_y})")
                                print(f"   üñ±Ô∏è  –ö–ª–∏–∫–∞—é –Ω–∞ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
                                self.screen.click_at(corrected_x, corrected_y, force=True)
                                await asyncio.sleep(2)
                            else:
                                print(f"   ‚ö†Ô∏è –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                    else:
                        conf = element.get('confidence', 0)
                        print(f"   ‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({conf:.2f})")
                else:
                    print(f"   ‚ö†Ô∏è Gemini –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç")
            
            if attempt < self.max_attempts:
                print(f"   üîÑ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                await asyncio.sleep(1)
        
        print(f"\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞ {self.max_attempts} –ø–æ–ø—ã—Ç–∫–∏")
        return False
