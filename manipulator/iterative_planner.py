"""
–ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –ø–ª–∞–Ω–∞

–¶–∏–∫–ª —Ä–∞–±–æ—Ç—ã:
1. Gemini —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞–Ω (—Å—Ç–æ–ª—å–∫–æ —à–∞–≥–æ–≤, –≤ —Å–∫–æ–ª—å–∫–∏—Ö —É–≤–µ—Ä–µ–Ω–∞)
2. –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏
3. –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ–º REPLAN - –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
4. –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–∫–∞ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∑–∞—Å—Ç—Ä—è–ª–∏
"""
import asyncio
import logging
import yaml
import json
import os
import time
from typing import List, Dict, Any
import google.generativeai as genai
from screen_manager import ScreenManager
import subprocess
import pyautogui
from chrome_mcp_integration import get_chrome_mcp_integration, close_chrome_mcp_integration

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
with open('system_capabilities.yaml', 'r', encoding='utf-8') as f:
    CAPABILITIES = yaml.safe_load(f)


class ActionTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∏—Ö"""
    
    def __init__(self):
        self.failed_actions = []  # [(action, params, reason), ...]
        
    def add_failed(self, action: str, params: Dict, reason: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        key_info = f"{action}"
        if action == "CLICK":
            element_desc = params.get('element_description', '')[:50]
            key_info += f" '{element_desc}'"
        elif action == "TYPE":
            text = params.get('text', '')[:30]
            key_info += f" '{text}'"
            
        self.failed_actions.append((key_info, reason))
        
    def get_history_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)"""
        if not self.failed_actions:
            return "–ù–µ—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"
        
        history = []
        for action, reason in self.failed_actions[-5:]:
            history.append(f"‚ùå {action} - {reason}")
        return "\n".join(history)
        
    def is_repeating(self, action: str, params: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ–¥–∞–≤–Ω—é—é –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É"""
        if action == "CLICK":
            element_desc = params.get('element_description', '')[:50]
            check_str = f"CLICK '{element_desc}'"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –ø–æ–ø—ã—Ç–∫–∏
            for failed_action, _ in self.failed_actions[-3:]:
                if check_str in failed_action:
                    return True
        return False


class ProgressTracker:
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –¥–µ—Ç–µ–∫—Ç–∏—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ"""
    
    def __init__(self, stuck_threshold: int = 3):
        self.stuck_threshold = stuck_threshold
        self.history = []  # [(state_hash, explanation), ...]
        self.stuck_count = 0
        
    def update(self, state_description: str, screenshot_hash: str = None):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å
        
        Returns:
            bool: True –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å, False –µ—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
        """
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_hash = hash(state_description.lower()[:200])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if len(self.history) > 0:
            prev_hash = self.history[-1][0]
            if state_hash == prev_hash:
                self.stuck_count += 1
                logger.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –∑–∞—Ü–∏–∫–ª–∏–ª–∏—Å—å (—Å—á–µ—Ç—á–∏–∫: {self.stuck_count}/{self.stuck_threshold})")
            else:
                self.stuck_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å—Ç—å
        
        self.history.append((state_hash, state_description))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥
        if self.stuck_count >= self.stuck_threshold:
            logger.error(f"‚ùå –ó–∞—Å—Ç—Ä—è–ª–∏! {self.stuck_threshold} –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")
            return False
        
        return True


def validate_element_description(description: str) -> tuple:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≥–æ–¥–∏—Ç—Å—è –¥–ª—è Vision AI
    
    Returns:
        (is_valid: bool, error_message: str)
    """
    if not description or not description.strip():
        return False, "–ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
    
    desc = description.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
    if len(desc) < 10:
        return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ URL/—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    invalid_patterns = ['http://', 'https://', 'about:', '.com', '.ru', '.org', 'www.']
    if any(pattern in desc.lower() for pattern in invalid_patterns):
        return False, "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ URL, –∞ –Ω–µ UI —ç–ª–µ–º–µ–Ω—Ç"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app_names = ['spotify', 'chrome', 'safari', 'yandex', 'firefox', 'telegram', 'zoom']
    if desc.lower().strip() in app_names:
        return False, f"'{desc}' - —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–∞"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–ª–æ–≤ —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    location_words = [
        '–≤–µ—Ä—Ö', '–Ω–∏–∑', '–ª–µ–≤', '–ø—Ä–∞–≤', '—Ü–µ–Ω—Ç—Ä', '—É–≥–æ–ª', 
        '–¥–æ–∫', '–ø–∞–Ω–µ–ª', '—Å—Ç—Ä–æ–∫', '—Å—Ç–æ—Ä–æ–Ω', '–∫—Ä–∞–π',
        'top', 'bottom', 'left', 'right', 'center', 'corner',
        'toolbar', 'sidebar', 'bar', 'menu'
    ]
    has_location = any(word in desc.lower() for word in location_words)
    
    if not has_location:
        return False, "–ù–µ—Ç —É–∫–∞–∑–∞–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–æ–±–∞–≤—å: –≤–≤–µ—Ä—Ö—É/–≤–Ω–∏–∑—É/—Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞/–≤ —Ü–µ–Ω—Ç—Ä–µ)"
    
    return True, "OK"


class IterativePlanner:
    """
    –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π –ø–ª–∞–Ω–∞
    """
    
    def __init__(self, api_key: str, screen_manager: ScreenManager = None):
        genai.configure(api_key=api_key)
        # –í–ê–ñ–ù–û: –¢–û–õ–¨–ö–û –º–æ–¥–µ–ª–∏ 2.5+ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.model = genai.GenerativeModel('gemini-2.5-pro')
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π ScreenManager –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å –∫–æ–Ω—Ñ–∏–≥–æ–º –∏–∑ config
        if screen_manager:
            self.screen = screen_manager
        else:
            import config
            self.screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
        self.tracker = ProgressTracker(stuck_threshold=CAPABILITIES['limits']['stuck_threshold'])
        self.action_tracker = ActionTracker()
        self.replan_count = 0
        self.max_replans = CAPABILITIES['limits']['max_replans']
        self.chrome_mcp = None  # Lazy init –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.is_browser_task = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        
    async def _ensure_app_is_active(self, params: Dict):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –Ω—É–∂–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        –ï—Å–ª–∏ –Ω–µ—Ç - –≤—ã–≤–æ–¥–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        """
        # TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞/–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    def _build_capabilities_prompt(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Gemini"""
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        apps = CAPABILITIES['applications']
        apps_text = ", ".join(apps)
        
        # –°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
        actions_text = "\n".join([
            f"- {action['name']}: {action['description']}\n  –ü—Ä–∏–º–µ—Ä: {action['example']}"
            for action in CAPABILITIES['actions']
        ])
        
        # –ü—Ä–∞–≤–∏–ª–∞ (–¥–≤–∞ —É—Ä–æ–≤–Ω—è)
        high_level_rules = CAPABILITIES['planning_rules']['high_level']
        low_level_rules = CAPABILITIES['planning_rules']['low_level']
        
        rules_text = "–í–´–°–û–ö–ò–ô –£–†–û–í–ï–ù–¨ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è):\n" + "\n".join([f"‚Ä¢ {rule}" for rule in high_level_rules])
        rules_text += "\n\n–ù–ò–ó–ö–ò–ô –£–†–û–í–ï–ù–¨ (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è):\n" + "\n".join([f"‚Ä¢ {rule}" for rule in low_level_rules])
        
        return f"""
## –î–û–°–¢–£–ü–ù–´–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
{apps_text}

## –î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø
{actions_text}

## –ü–†–ê–í–ò–õ–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
{rules_text}

## üéØ –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –î–õ–Ø element_description –í CLICK:

element_description - —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –í–ù–ï–®–ù–ï–ì–û –í–ò–î–ê UI —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è Vision AI, –ù–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ!

‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã:
- "–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–µ –±–µ–ª–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞"
- "–∫—Ä—É–≥–ª–∞—è –∑–µ–ª—ë–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Play —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–ª–µ–µ—Ä–∞ –≤–Ω–∏–∑—É"
- "–∫—Ä—É–≥–ª–∞—è –∏–∫–æ–Ω–∫–∞ Google Chrome (–∫—Ä–∞—Å–Ω–æ-–∂—ë–ª—Ç–æ-–∑–µ–ª–µ–Ω–æ-—Å–∏–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø) –≤ –¥–æ–∫–µ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞"
- "–ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –≤–∏–¥–µ–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ (—Å –ø—Ä–µ–≤—å—é –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º)"
- "–∫—Ä–∞—Å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ Subscribe —Å–ø—Ä–∞–≤–∞ –ø–æ–¥ –≤–∏–¥–µ–æ"

‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–´–ï –ø—Ä–∏–º–µ—Ä—ã (–ù–ï –î–ï–õ–ê–ô –¢–ê–ö):
- "about:blank" ‚Üê –≠—Ç–æ –°–û–î–ï–†–ñ–ò–ú–û–ï –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ UI
- "Google Chrome" ‚Üê –≠—Ç–æ –ù–ê–ó–í–ê–ù–ò–ï –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∞ –Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
- "Play" ‚Üê –°–ª–∏—à–∫–æ–º –æ–±—â–æ, –≥–¥–µ? –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç?
- "–ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç" ‚Üê –ü–µ—Ä–≤—ã–π –ß–¢–û? –∫–∞—Ä—Ç–æ—á–∫–∞? —Å—Å—ã–ª–∫–∞? –∫–Ω–æ–ø–∫–∞?
- "youtube.com" ‚Üê –≠—Ç–æ URL, –∞ –Ω–µ UI —ç–ª–µ–º–µ–Ω—Ç
- "–∫–Ω–æ–ø–∫–∞" ‚Üê –ö–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞? –≥–¥–µ? –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞?

–§–û–†–ú–£–õ–ê: [–§–û–†–ú–ê/–¶–í–ï–¢] + [–°–û–î–ï–†–ñ–ò–ú–û–ï/–ò–ö–û–ù–ö–ê] + [–†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï –ù–ê –≠–ö–†–ê–ù–ï]

## ‚ö° –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–û–û–†–î–ò–ù–ê–¢ (–°–ï–¢–ö–ê):
–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ç–∫—É –¥–ª—è –¢–û–ß–ù–û–ì–û –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:

üîç –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –≠–∫—Ä–∞–Ω —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–µ—Ç–∫—É 50x50 –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫
2. Gemini –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ü–µ–Ω—Ç—Ä —ç–ª–µ–º–µ–Ω—Ç–∞
3. –ú—ã –∫–ª–∏–∫–∞–µ–º –≤ —Ü–µ–Ω—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏

üìê –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
- –¢–æ—á–Ω–æ—Å—Ç—å ¬±1% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ (–≥–æ—Ä–∞–∑–¥–æ –ª—É—á—à–µ —á–µ–º –ø–∏–∫—Å–µ–ª–∏)
- –†–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –µ—Å–ª–∏ Gemini –Ω–µ –º–æ–∂–µ—Ç –¥–∞—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
- –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –±–ª–∏–∑–∫–∞ –∫ 100% –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

üéØ –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π:
- –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
- –£–∫–∞–∑—ã–≤–∞–π —Ñ–æ—Ä–º—É, —Ü–≤–µ—Ç, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã
- –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ç–µ–∫—Å—Ç - —É–ø–æ–º—è–Ω–∏ –µ–≥–æ –í–ù–ï–®–ù–ò–ô –í–ò–î, –∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ

## –í–ê–ñ–ù–û –û –í–í–û–î–ï –¢–ï–ö–°–¢–ê:
‚ö†Ô∏è –ï—Å–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –£–ñ–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç (–∞–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å URL, –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º):
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏: HOTKEY('cmd+a') –ø–µ—Ä–µ–¥ TYPE
- –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: CLICK(–ø–æ–ª–µ) ‚Üí HOTKEY('cmd+a') ‚Üí TYPE(–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç)
- –ë–µ–∑ cmd+a –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –î–û–ë–ê–í–ò–¢–°–Ø –∫ —Å—Ç–∞—Ä–æ–º—É!

–ü—Ä–∏–º–µ—Ä—ã:
‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û –¥–ª—è –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å "about:blank":
  1. CLICK("–ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞ –≤–≤–µ—Ä—Ö—É")
  2. HOTKEY('cmd+a')
  3. TYPE("youtube.com")
  
‚ùå –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û:
  1. CLICK("–ø–æ–ª–µ –∞–¥—Ä–µ—Å–∞")
  2. TYPE("youtube.com")  ‚Üê –ø–æ–ª—É—á–∏—Ç—Å—è "about:blankyoutube.com"!

## üöÄ –ò–ï–†–ê–†–•–ò–Ø –ü–†–ò–û–†–ò–¢–ï–¢–û–í:

### 1Ô∏è‚É£ TERMINAL (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #1)
–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚úÖ TERMINAL('open -a "Chrome"')
‚úÖ HOTKEY('cmd+space')
‚ùå CLICK('–∏–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

### 2Ô∏è‚É£ ACCESSIBILITY_API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #2)
–ù–ï –†–ï–ê–õ–ò–ó–û–í–ê–ù–û - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

### 3Ô∏è‚É£ MCP CHROME (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #3) - –î–õ–Ø –ë–†–ê–£–ó–ï–†–ê!
**–ò–°–ü–û–õ–¨–ó–£–ô –¥–ª—è Chrome/–≤–µ–±-–∑–∞–¥–∞—á:**

MCP_NAVIGATE(url='https://youtube.com')
  ‚Üí –û—Ç–∫—Ä—ã—Ç—å URL. –ü–†–ò–û–†–ò–¢–ï–¢ –≤—ã—à–µ CLICK!

MCP_CLICK(selector='input[name="search"]')
  ‚Üí –ö–ª–∏–∫ –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ü–†–ò–û–†–ò–¢–ï–¢ –≤—ã—à–µ VISUAL_CLICK!
  
MCP_EXECUTE_JS(code='document.querySelector("button").click()')
  ‚Üí JavaScript –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

MCP_TYPE(text='hello', selector='input#search')
  ‚Üí –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –∑–Ω–∞–µ—à—å —Å–µ–ª–µ–∫—Ç–æ—Ä

**FALLBACK:** –ï—Å–ª–∏ MCP failed ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ VISUAL_CLICK

### 4Ô∏è‚É£ VISUAL_CLICK (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç #4) - LAST RESORT
–¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞:
- –ù–µ –∑–Ω–∞–µ—à—å CSS —Å–µ–ª–µ–∫—Ç–æ—Ä
- –ù–µ –±—Ä–∞—É–∑–µ—Ä (Spotify, –¥—Ä—É–≥–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
- MCP –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª

**–ü–†–ò–ú–ï–†–´:**
Chrome –∑–∞–¥–∞—á–∞:
  ‚úÖ MCP_NAVIGATE('youtube.com')    ‚Üê #3
  ‚úÖ MCP_CLICK('input#search')      ‚Üê #3
  ‚ùå CLICK('–∞–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞')       ‚Üê –∏—Å–ø–æ–ª—å–∑—É–π MCP!

Spotify –∑–∞–¥–∞—á–∞:
  ‚úÖ CLICK('–∫–Ω–æ–ø–∫–∞ Play')           ‚Üê MCP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  ‚úÖ TYPE('–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞')         ‚Üê –æ–±—ã—á–Ω—ã–π TYPE

## –í–ê–ñ–ù–û –û –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ò
- –ü–ª–∞–Ω–∏—Ä—É–π –ú–ê–ö–°–ò–ú–£–ú 2-4 —à–∞–≥–∞ –∑–∞ —Ä–∞–∑
- –ï—Å–ª–∏ confidence —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ < 90% - –∏—Å–ø–æ–ª—å–∑—É–π REPLAN –°–ï–ô–ß–ê–°
- –õ—É—á—à–µ –±–æ–ª—å—à–µ REPLAN, —á–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–ª–∞–Ω
"""

    async def create_initial_plan(self, user_request: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            {
                'goal': str,
                'steps': [
                    {'action': 'CLICK', 'params': {...}, 'confidence': 0.95},
                    ...
                ],
                'reasoning': str
            }
        """
        capabilities = self._build_capabilities_prompt()
        
        prompt = f"""{capabilities}

## –ó–ê–î–ê–ß–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
{user_request}

–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏. –ü–õ–ê–ù–ò–†–£–ô –¢–û–õ–¨–ö–û –°–ê–ú–´–ï –û–ß–ï–í–ò–î–ù–´–ï –ü–ï–†–í–´–ï 2-4 –®–ê–ì–ê!

–û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "goal": "–æ–±—â–∞—è —Ü–µ–ª—å –∑–∞–¥–∞—á–∏",
    "steps": [
        {{
            "action": "CLICK|TYPE|TERMINAL|HOTKEY|WAIT|REPLAN",
            "params": {{
                "element_description": "–î–ï–¢–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≤—ã—à–µ"
            }},
            "confidence": 0.0-1.0,
            "reasoning": "–ø–æ—á–µ–º—É —ç—Ç–æ—Ç —à–∞–≥"
        }}
    ],
    "reasoning": "–æ–±—â–∞—è –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∞"
}}

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –î–ª—è CLICK –∏—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∫–ª—é—á "element_description"
2. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª–µ: [–§–û–†–ú–ê/–¶–í–ï–¢] + [–°–û–î–ï–†–ñ–ò–ú–û–ï] + [–†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï]
3. –ü–ª–∞–Ω–∏—Ä—É–π –ú–ê–ö–°–ò–ú–£–ú 2-4 —à–∞–≥–∞ (–Ω–µ –±–æ–ª—å—à–µ!)
4. –ö–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å confidence > 0.9
5. –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –Ω–∞ 90%+ –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ - –¥–æ–±–∞–≤—å REPLAN

–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –ø–ª–∞–Ω–æ–≤:
- –ó–∞–¥–∞—á–∞ "–æ—Ç–∫—Ä—ã—Ç—å YouTube" ‚Üí 2 —à–∞–≥–∞: CLICK(–∞–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞), TYPE(youtube.com), WAIT(3), REPLAN
- –ó–∞–¥–∞—á–∞ "–Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–æ—Ç–æ–≤" ‚Üí 3 —à–∞–≥–∞: CLICK(–ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ —Å –ª—É–ø–æ–π), TYPE(–∫–æ—Ç—ã), WAIT(2), REPLAN

–ù–ï –ø–ª–∞–Ω–∏—Ä—É–π –¥–∞–ª—å—à–µ –µ—Å–ª–∏ –Ω–µ –≤–∏–¥–∏—à—å —ç–∫—Ä–∞–Ω!
"""
        
        response = self.model.generate_content(prompt)
        plan_text = response.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        if '```json' in plan_text:
            plan_text = plan_text.split('```json')[1].split('```')[0].strip()
        elif '```' in plan_text:
            plan_text = plan_text.split('```')[1].split('```')[0].strip()
        
        plan = json.loads(plan_text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –±–æ–ª—å—à–µ max_steps_per_plan —à–∞–≥–æ–≤
        max_steps = CAPABILITIES['limits']['max_steps_per_plan']
        if len(plan['steps']) > max_steps:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç {len(plan['steps'])} —à–∞–≥–æ–≤, –æ–±—Ä–µ–∑–∞—é –¥–æ {max_steps}")
            plan['steps'] = plan['steps'][:max_steps]
        
        logger.info(f"üìã –°–æ–∑–¥–∞–Ω –ø–ª–∞–Ω: {len(plan['steps'])} —à–∞–≥–æ–≤")
        logger.info(f"üéØ –¶–µ–ª—å: {plan['goal']}")
        
        return plan

    async def replan(self, screenshot_path: str, original_goal: str, 
                    current_state: str, steps_done: List[str]) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
        
        Args:
            screenshot_path: –ü—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            original_goal: –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–ª—å –∑–∞–¥–∞—á–∏
            current_state: –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç Vision
            steps_done: –°–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
        """
        self.replan_count += 1
        
        if self.replan_count > self.max_replans:
            logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç replan ({self.max_replans})")
            return {'steps': []}
        
        logger.info(f"üîÑ Replan #{self.replan_count}")
        
        capabilities = self._build_capabilities_prompt()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        img_file = genai.upload_file(screenshot_path)
        
        steps_done_text = "\n".join([f"{i+1}. {step}" for i, step in enumerate(steps_done)])
        failed_history = self.action_tracker.get_history_text()
        
        prompt = f"""{capabilities}

## –ò–ó–ù–ê–ß–ê–õ–¨–ù–ê–Ø –¶–ï–õ–¨
{original_goal}

## –£–ñ–ï –í–´–ü–û–õ–ù–ï–ù–û
{steps_done_text}

## –ù–ï–£–î–ê–ß–ù–´–ï –ü–û–ü–´–¢–ö–ò (–ù–ï –ü–û–í–¢–û–†–Ø–ô!)
{failed_history}

## –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï (–°–ú–û–¢–†–ò –°–ö–†–ò–ù–®–û–¢)
{current_state}

–ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ —Å–æ–∑–¥–∞–π –ù–û–í–´–ô –ø–ª–∞–Ω –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏.

‚ö†Ô∏è –ù–ï –ü–û–í–¢–û–†–Ø–ô –Ω–µ—É–¥–∞—á–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏! –í—ã–±–µ—Ä–∏ –î–†–£–ì–û–ô –ø–æ–¥—Ö–æ–¥!

–û–¢–í–ï–¢–¨ –í –§–û–†–ú–ê–¢–ï JSON:
{{
    "steps": [
        {{
            "action": "CLICK|TYPE|TERMINAL|HOTKEY|WAIT|REPLAN",
            "params": {{
                "element_description": "–î–ï–¢–ê–õ–¨–ù–û–ï –æ–ø–∏—Å–∞–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ [–§–û–†–ú–ê] + [–°–û–î–ï–†–ñ–ò–ú–û–ï] + [–†–ê–°–ü–û–õ–û–ñ–ï–ù–ò–ï]"
            }},
            "confidence": 0.0-1.0,
            "reasoning": "–ø–æ—á–µ–º—É —ç—Ç–æ—Ç —à–∞–≥ (–∏ –ø–æ—á–µ–º—É –ù–ï –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏)"
        }}
    ],
    "progress_assessment": "–¥–≤–∏–∂–µ–º—Å—è –ª–∏ –∫ —Ü–µ–ª–∏ –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏"
}}

–ö–†–ò–¢–ò–ß–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –∫–ª—é—á "element_description" (–Ω–∏–∫–∞–∫–∏—Ö target/query)
2. –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ö–û–ù–ö–†–ï–¢–ù–´–ú: —Ñ–æ—Ä–º–∞, —Ü–≤–µ—Ç, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ
3. –ü–ª–∞–Ω–∏—Ä—É–π 2-3 —à–∞–≥–∞ –º–∞–∫—Å–∏–º—É–º
4. Confidence > 0.9 –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
5. –ï—Å–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ - –≤–µ—Ä–Ω–∏ –ü–£–°–¢–û–ô —Å–ø–∏—Å–æ–∫ steps: []
6. –ï—Å–ª–∏ –≤–∏–¥–∏—à—å —á—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—à—å –Ω–µ—É–¥–∞—á—É - –û–°–¢–ê–ù–û–í–ò –°–ï–ë–Ø –∏ –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å

‚ö†Ô∏è –ù–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–û–û–†–î–ò–ù–ê–¢:
–°–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ç–∫—É 50x50 –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
Gemini –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä —è—á–µ–π–∫–∏, –º—ã –∫–ª–∏–∫–∞–µ–º –≤ –µ—ë —Ü–µ–Ω—Ç—Ä.
–≠—Ç–æ –¥–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å ¬±1% —ç–∫—Ä–∞–Ω–∞ –≤–º–µ—Å—Ç–æ –ø–∏–∫—Å–µ–ª–µ–π.

‚ö†Ô∏è –î–õ–Ø –í–í–û–î–ê –¢–ï–ö–°–¢–ê:
- –ï—Å–ª–∏ –ø–æ–ª–µ –£–ñ–ï —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç ‚Üí –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: CLICK ‚Üí HOTKEY('cmd+a') ‚Üí TYPE
- –ë–µ–∑ cmd+a –ø–æ–ª—É—á–∏—Ç—Å—è: "—Å—Ç–∞—Ä—ã–π_—Ç–µ–∫—Å—Ç + –Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Ç"!
- –ü—Ä–∏–º–µ—Ä: –∞–¥—Ä–µ—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å "about:blank" ‚Üí –Ω—É–∂–µ–Ω cmd+a –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º URL

–ï—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏ (–ø–æ–≤—Ç–æ—Ä—è–µ–º –æ—à–∏–±–∫–∏ 2+ —Ä–∞–∑–∞) - –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ steps.
"""
        
        response = self.model.generate_content([prompt, img_file])
        plan_text = response.text.strip()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON
        if '```json' in plan_text:
            plan_text = plan_text.split('```json')[1].split('```')[0].strip()
        elif '```' in plan_text:
            plan_text = plan_text.split('```')[1].split('```')[0].strip()
        
        plan = json.loads(plan_text)
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è: –Ω–µ –±–æ–ª—å—à–µ max_steps_per_plan —à–∞–≥–æ–≤
        max_steps = CAPABILITIES['limits']['max_steps_per_plan']
        if len(plan.get('steps', [])) > max_steps:
            logger.warning(f"‚ö†Ô∏è –ü–ª–∞–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç {len(plan['steps'])} —à–∞–≥–æ–≤, –æ–±—Ä–µ–∑–∞—é –¥–æ {max_steps}")
            plan['steps'] = plan['steps'][:max_steps]
        
        logger.info(f"üìã –ù–æ–≤—ã–π –ø–ª–∞–Ω: {len(plan.get('steps', []))} —à–∞–≥–æ–≤")
        logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {plan.get('progress_assessment', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if not self.tracker.update(current_state):
            logger.error("‚ùå –ó–∞—Å—Ç—Ä—è–ª–∏! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
            return {'steps': []}
        
        return plan

    async def execute_step(self, step: Dict[str, Any], monitor_info: Dict) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ –ø–ª–∞–Ω–∞
        
        Returns:
            {
                'success': bool,
                'result': str,
                'needs_replan': bool
            }
        """
        action = step['action']
        params = step.get('params', {})
        
        logger.info(f"‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è—é: {action} {params}")
        
        try:
            # MCP Actions (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3)
            if action.startswith('MCP_'):
                return await self._execute_mcp_action(action, params, monitor_info)
            
            # Traditional actions
            elif action == 'CLICK':
                return await self._execute_click(params, monitor_info)
            
            elif action == 'TYPE':
                return await self._execute_type(params)
            
            elif action == 'TERMINAL':
                return await self._execute_terminal(params)
            
            elif action == 'HOTKEY':
                return await self._execute_hotkey(params)
            
            elif action == 'WAIT':
                return await self._execute_wait(params)
            
            elif action == 'REPLAN':
                return {
                    'success': True,
                    'result': '–¢—Ä–µ–±—É–µ—Ç—Å—è replan',
                    'needs_replan': True
                }
            
            else:
                return {
                    'success': False,
                    'result': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}',
                    'needs_replan': False
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞: {e}", exc_info=True)
            return {
                'success': False,
                'result': str(e),
                'needs_replan': False
            }

    async def _execute_mcp_action(self, action: str, params: Dict, monitor_info: Dict) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç MCP –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –Ω–∞ VISUAL_CLICK
        
        Args:
            action: MCP_NAVIGATE, MCP_CLICK, MCP_EXECUTE_JS, MCP_TYPE
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
            monitor_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Ñ–ª–∞–≥–æ–º needs_replan
        """
        # Lazy init Chrome MCP
        if not self.chrome_mcp:
            self.chrome_mcp = await get_chrome_mcp_integration()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º MCP –¥–µ–π—Å—Ç–≤–∏–µ
        result = await self.chrome_mcp.execute_action(action, params)
        
        if result['success']:
            # MCP —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å
            logger.info(f"‚úÖ {result['result']}")
            return {
                'success': True,
                'result': result['result'],
                'needs_replan': False
            }
        
        elif result.get('needs_fallback'):
            # MCP –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º fallback
            logger.warning(f"‚ö†Ô∏è MCP failed: {result['result']}")
            logger.info("üí° –ü—Ä–æ–±—É—é fallback –Ω–∞ VISUAL_CLICK...")
            
            # Fallback: MCP_CLICK ‚Üí CLICK
            if action == 'MCP_CLICK':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ
                selector = params.get('selector', '')
                element_desc = f"—ç–ª–µ–º–µ–Ω—Ç —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º {selector}" if selector else "—ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"
                
                fallback_params = {'element_description': element_desc}
                return await self._execute_click(fallback_params, monitor_info)
            
            # –î–ª—è –¥—Ä—É–≥–∏—Ö MCP –¥–µ–π—Å—Ç–≤–∏–π fallback –Ω–µ—Ç - –Ω—É–∂–µ–Ω replan
            else:
                self.action_tracker.add_failed(action, params, result['result'])
                return {
                    'success': False,
                    'result': f"{result['result']} (fallback –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)",
                    'needs_replan': True
                }
        
        else:
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ fallback
            self.action_tracker.add_failed(action, params, result['result'])
            return {
                'success': False,
                'result': result['result'],
                'needs_replan': True
            }

    async def _execute_click(self, params: Dict, monitor_info: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —á–µ—Ä–µ–∑ Vision"""
        from self_correcting_executor import SelfCorrectingExecutor
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à ScreenManager –≤ executor
        executor = SelfCorrectingExecutor(screen_manager=self.screen)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ - –¢–û–õ–¨–ö–û –∏–∑ element_description
        element_desc = params.get('element_description', '').strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
        is_valid, error_msg = validate_element_description(element_desc)
        if not is_valid:
            logger.error(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {error_msg}")
            logger.error(f"   –ü–æ–ª—É—á–µ–Ω–æ: '{element_desc}'")
            self.action_tracker.add_failed("CLICK", params, f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {error_msg}")
            return {
                'success': False, 
                'result': f'–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {error_msg}', 
                'needs_replan': True
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ª–∏ –º—ã –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
        if self.action_tracker.is_repeating("CLICK", params):
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –Ω–µ—É–¥–∞—á–Ω—ã–π CLICK: {element_desc[:50]}")
            self.action_tracker.add_failed("CLICK", params, "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
            return {
                'success': False,
                'result': f'–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: {element_desc}',
                'needs_replan': True
            }
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        screenshot = self.screen.capture_secondary_monitor()
        await asyncio.sleep(1)
        
        # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç
        element = await executor.find_element_coordinates(screenshot, element_desc, monitor_info)
        
        # confidence —Ç–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∫–∞: '–≤—ã—Å–æ–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è', '–Ω–∏–∑–∫–∞—è'
        confidence_ok = element.get('confidence', '–Ω–∏–∑–∫–∞—è') in ['–≤—ã—Å–æ–∫–∞—è', '—Å—Ä–µ–¥–Ω—è—è']
        if element['found'] and confidence_ok:
            logger.info(f"‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {element_desc[:50]}")
            self.screen.click_at(element['x'], element['y'], force=True)
            await asyncio.sleep(1)
            return {'success': True, 'result': f'–ö–ª–∏–∫–Ω—É–ª –Ω–∞ {element_desc[:50]}', 'needs_replan': False}
        else:
            logger.warning(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {element_desc[:50]}")
            self.action_tracker.add_failed("CLICK", params, "–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω Vision'–æ–º")
            return {'success': False, 'result': f'–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {element_desc[:50]}', 'needs_replan': True}

    async def _execute_type(self, params: Dict) -> Dict:
        """–í–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç"""
        text = params.get('text', '')
        safe_text = text.replace('\\', '\\\\').replace('"', '\\"')
        
        script = f'''
        tell application "System Events"
            keystroke "{safe_text}"
        end tell
        '''
        subprocess.run(['osascript', '-e', script], timeout=10)
        await asyncio.sleep(0.5)
        
        return {'success': True, 'result': f'–í–≤–µ–ª —Ç–µ–∫—Å—Ç: {text}', 'needs_replan': False}

    async def _execute_terminal(self, params: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        command = params.get('command', '')
        cwd = params.get('cwd', os.path.expanduser('~'))
        
        result = subprocess.run(command, shell=True, cwd=cwd, 
                              capture_output=True, text=True, timeout=30)
        
        return {
            'success': result.returncode == 0,
            'result': result.stdout or result.stderr,
            'needs_replan': False
        }

    async def _execute_hotkey(self, params: Dict) -> Dict:
        """–ù–∞–∂–∏–º–∞–µ—Ç –≥–æ—Ä—è—á—É—é –∫–ª–∞–≤–∏—à—É"""
        combo = params.get('combo', '')
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–±–∏–Ω–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä "cmd+f")
        parts = combo.lower().split('+')
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç pyautogui
        modifiers = []
        key = parts[-1]
        
        for part in parts[:-1]:
            if part in ['cmd', 'command']:
                modifiers.append('command')
            elif part in ['ctrl', 'control']:
                modifiers.append('ctrl')
            elif part in ['alt', 'option']:
                modifiers.append('alt')
            elif part == 'shift':
                modifiers.append('shift')
        
        pyautogui.hotkey(*modifiers, key)
        await asyncio.sleep(0.5)
        
        return {'success': True, 'result': f'–ù–∞–∂–∞—Ç–∞ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è: {combo}', 'needs_replan': False}

    async def _execute_wait(self, params: Dict) -> Dict:
        """–ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        seconds = min(10, max(1, params.get('seconds', 2)))
        await asyncio.sleep(seconds)
        return {'success': True, 'result': f'–ü–æ–¥–æ–∂–¥–∞–ª {seconds}—Å', 'needs_replan': False}
