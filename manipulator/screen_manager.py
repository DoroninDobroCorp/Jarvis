import logging
import pyautogui
from Quartz import CGDisplayBounds, CGMainDisplayID, CGGetActiveDisplayList
from PIL import Image
import config
import time
import os
from user_activity_detector import UserActivityDetector

logger = logging.getLogger(__name__)

class ScreenManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏, —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –∫–ª–∏–∫–∞–º–∏
    –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self, wait_for_user_idle: bool = True):
        """
        Args:
            wait_for_user_idle: –ñ–¥–∞—Ç—å –ª–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–∞–º–∏
        """
        self.displays = self._get_displays()
        self.wait_for_user_idle = wait_for_user_idle
        self.activity_detector = UserActivityDetector() if wait_for_user_idle else None
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len(self.displays)}")
        logger.info(f"–†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è: {'‚úÖ –í–ö–õ' if wait_for_user_idle else '‚ùå –í–´–ö–õ'}")
        
    def _get_displays(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö"""
        max_displays = 10
        active_displays = CGGetActiveDisplayList(max_displays, None, None)[1]
        
        displays = []
        for display_id in active_displays:
            bounds = CGDisplayBounds(display_id)
            displays.append({
                'id': display_id,
                'x': int(bounds.origin.x),
                'y': int(bounds.origin.y),
                'width': int(bounds.size.width),
                'height': int(bounds.size.height)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
        displays.sort(key=lambda d: d['x'])
        
        for i, display in enumerate(displays):
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {i}: {display}")
        
        return displays
    
    def get_secondary_monitor(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)"""
        if len(self.displays) < 2:
            logger.warning("–í—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π")
            return self.displays[0]
        return self.displays[config.SECONDARY_MONITOR_INDEX]
    
    def capture_secondary_monitor(self) -> str:
        """
        –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        """
        display = self.get_secondary_monitor()
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Å–µ–≥–æ —ç–∫—Ä–∞–Ω–∞
        screenshot = pyautogui.screenshot()
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        cropped = screenshot.crop((
            display['x'],
            display['y'],
            display['x'] + display['width'],
            display['y'] + display['height']
        ))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        timestamp = int(time.time())
        filename = f"screenshot_{timestamp}.png"
        filepath = os.path.join(config.SCREENSHOTS_DIR, filename)
        cropped.save(filepath)
        
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def click_at(self, x: int, y: int, force: bool = False):
        """
        –ö–ª–∏–∫–∞–µ—Ç –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥—ë—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        
        Args:
            x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è)
            y: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è)
            force: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤!)
        """
        display = self.get_secondary_monitor()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ
        abs_x = display['x'] + x
        abs_y = display['y'] + y
        
        logger.info(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({abs_x}, {abs_y})")
        
        # –ñ–¥—ë–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–µ force)
        if self.wait_for_user_idle and not force and self.activity_detector:
            if not self.activity_detector.wait_for_idle(idle_seconds=2.0, show_notification=True):
                logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
        
        # –î–≤–∏–≥–∞–µ–º –º—ã—à—å –∏ –∫–ª–∏–∫–∞–µ–º
        logger.debug(f"–î–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ ({abs_x}, {abs_y})")
        pyautogui.moveTo(abs_x, abs_y, duration=0.5)
        pyautogui.click()
        logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    def type_text(self, text: str, force: bool = False):
        """
        –í–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥—ë—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            force: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        """
        logger.info(f"‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {text[:50]}{'...' if len(text) > 50 else ''}")
        
        # –ñ–¥—ë–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if self.wait_for_user_idle and not force and self.activity_detector:
            if not self.activity_detector.wait_for_idle(idle_seconds=2.0, show_notification=True):
                logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
        
        time.sleep(0.5)
        pyautogui.write(text, interval=0.05)
        pyautogui.press('enter')
        logger.info("‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω")
    
    def press_key(self, key: str):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à—É"""
        logger.info(f"‚å®Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏: {key}")
        pyautogui.press(key)
