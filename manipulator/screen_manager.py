import logging
import pyautogui
from Quartz import CGDisplayBounds, CGMainDisplayID, CGGetActiveDisplayList
from PIL import Image
import config
import time
import os
import warnings
from user_activity_detector import UserActivityDetector
from coordinate_correction import correct_click_coordinates, get_display_scale

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º ALTS warnings –æ—Ç Google API
warnings.filterwarnings('ignore', message='.*ALTS.*')

logger = logging.getLogger(__name__)

class ScreenManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞–º–∏, —Å–∫—Ä–∏–Ω—à–æ—Ç–∞–º–∏ –∏ –∫–ª–∏–∫–∞–º–∏
    –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    
    def __init__(self, wait_for_user_idle: bool = True):
        """
        Args:
            wait_for_user_idle: –ñ–¥–∞—Ç—å –ª–∏ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–∞–º–∏
        """
        self.displays = self._get_displays()
        self.wait_for_user_idle = wait_for_user_idle
        self.activity_detector = UserActivityDetector() if wait_for_user_idle else None
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len(self.displays)}")
        if len(self.displays) == 1:
            logger.warning(f"‚ö†Ô∏è –†–∞–±–æ—Ç–∞—é –≤ —Ä–µ–∂–∏–º–µ –æ–¥–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞")
        logger.info(f"–†–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è: {'‚úÖ –í–ö–õ' if wait_for_user_idle else '‚ùå –í–´–ö–õ'}")
        
    def _get_displays(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∞—Ö"""
        max_displays = 10
        active_displays = CGGetActiveDisplayList(max_displays, None, None)[1]
        
        displays = []
        for display_id in active_displays:
            bounds = CGDisplayBounds(display_id)
            
            # –ù–ï –æ–ø—Ä–µ–¥–µ–ª—è–µ–º scale –∑–¥–µ—Å—å - –±—É–¥–µ–º –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ —Å–∫—Ä–∏–Ω—à–æ—Ç—É
            # (–∫–∞–∫ –≤ color_pipette.py - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥)
            
            displays.append({
                'id': display_id,
                'x': int(bounds.origin.x),
                'y': int(bounds.origin.y),
                'width': int(bounds.size.width),
                'height': int(bounds.size.height)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ X (—Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ)
        displays.sort(key=lambda d: d['x'])
        
        for i, display in enumerate(displays):
            logger.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {i}: {display}")
        
        return displays
    
    def get_secondary_monitor(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)"""
        # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ª–æ–≥–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        # if len(self.displays) < 2:
        #     logger.warning("–í—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π")
        #     return self.displays[0]
        # return self.displays[config.SECONDARY_MONITOR_INDEX]
        
        # –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        logger.info("üñ•Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)")
        return self.displays[0]
    
    def capture_secondary_monitor(self) -> str:
        """
        –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
        
        –í–ê–ñ–ù–û: screencapture –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –§–ò–ó–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (Retina 2x)
        –õ–æ–≥–∏–∫–∞ –∏–∑ color_pipette.py - –ù–ï —Ä–µ—Å–∞–π–∑–∏–º, —Ä–∞–±–æ—Ç–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º
        
        Returns:
            –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        """
        display = self.get_secondary_monitor()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        timestamp = int(time.time())
        filename = f"screenshot_{timestamp}.png"
        filepath = os.path.join(config.SCREENSHOTS_DIR, filename)
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¢–û–õ–¨–ö–û –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        import subprocess
        # –§–æ—Ä–º–∞—Ç -R: X,Y,WIDTH,HEIGHT (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        region = f"{display['x']},{display['y']},{display['width']},{display['height']}"
        subprocess.run([
            'screencapture',
            '-x',  # –ë–µ–∑ –∑–≤—É–∫–∞
            '-R', region,  # –†–µ–≥–∏–æ–Ω –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
            filepath
        ], check=True, stderr=subprocess.DEVNULL)  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º stderr warnings
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scale –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ color_pipette.py)
        scale = get_display_scale(display, filepath)
        display['scale'] = scale
        display['last_screenshot'] = filepath
        
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        logger.debug(f"   –†–µ–≥–∏–æ–Ω (–ª–æ–≥–∏—á–µ—Å–∫–∏–π): {region}")
        logger.debug(f"   Scale: {scale}x (—Ñ–∏–∑/–ª–æ–≥)")
        return filepath
    
    def get_secondary_monitor_info(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ –¥–ª—è Vision –ø—Ä–æ–º–ø—Ç–æ–≤ (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
        """
        display = self.get_secondary_monitor()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        return display
    
    def click_at(self, x: int, y: int, force: bool = False):
        """
        –ö–ª–∏–∫–∞–µ—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –Ω–∞ –ø–µ—Ä–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥—ë—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        
        Args:
            x: X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç Vision (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
            y: Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Ç Vision (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
            force: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤!)
        """
        display = self.get_secondary_monitor()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        screenshot_path = display.get('last_screenshot')
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º coordinate_correction –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        abs_x, abs_y, scale = correct_click_coordinates(x, y, display, screenshot_path)
        
        logger.debug(f"   Retina scale: {scale}x")
        logger.debug(f"   Vision –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å–∫—Ä–∏–Ω—à–æ—Ç): ({x}, {y})")
        logger.debug(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x/scale:.0f}, {y/scale:.0f})")
        logger.debug(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({abs_x}, {abs_y})")
        
        logger.info(f"üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({abs_x}, {abs_y})")
        
        # –ñ–¥—ë–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–µ force)
        if self.wait_for_user_idle and not force and self.activity_detector:
            logger.info(f"‚è∏Ô∏è  –î–µ–π—Å—Ç–≤–∏–µ: –∫–ª–∏–∫ –Ω–∞ ({abs_x}, {abs_y})")
            if not self.activity_detector.wait_for_idle(idle_seconds=2.2, show_notification=True):
                logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
        
        # –î–≤–∏–≥–∞–µ–º –º—ã—à—å –∏ –∫–ª–∏–∫–∞–µ–º
        logger.debug(f"–î–≤–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –Ω–∞ ({abs_x}, {abs_y})")
        pyautogui.moveTo(abs_x, abs_y, duration=0.5)
        pyautogui.click()
        logger.info("‚úÖ –ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    def type_text(self, text: str, force: bool = False):
        """
        –í–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥—ë—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –≤–≤–æ–¥–∞
            force: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        """
        logger.info(f"‚å®Ô∏è –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞: {text[:50]}{'...' if len(text) > 50 else ''}")
        
        # –ñ–¥—ë–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à
        if self.wait_for_user_idle and not force and self.activity_detector:
            logger.info(f"‚è∏Ô∏è  –î–µ–π—Å—Ç–≤–∏–µ: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ '{text[:30]}...'")
            if not self.activity_detector.wait_for_idle(idle_seconds=2.2, show_notification=True):
                logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
        
        time.sleep(0.5)
        pyautogui.write(text, interval=0.05)
        pyautogui.press('enter')
        logger.info("‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥—ë–Ω")
    
    def press_key(self, key: str, force: bool = False):
        """
        –ù–∞–∂–∏–º–∞–µ—Ç –∫–ª–∞–≤–∏—à—É
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∂–¥—ë—Ç –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        
        Args:
            key: –ö–ª–∞–≤–∏—à–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è
            force: –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
        """
        logger.info(f"‚å®Ô∏è –ù–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏: {key}")
        
        # –ñ–¥—ë–º –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–ï–†–ï–î –Ω–∞–∂–∞—Ç–∏–µ–º –∫–ª–∞–≤–∏—à–∏
        if self.wait_for_user_idle and not force and self.activity_detector:
            logger.info(f"‚è∏Ô∏è  –î–µ–π—Å—Ç–≤–∏–µ: –Ω–∞–∂–∞—Ç–∏–µ –∫–ª–∞–≤–∏—à–∏ '{key}'")
            if not self.activity_detector.wait_for_idle(idle_seconds=2.2, show_notification=True):
                logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª–∏—Å—å –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é...")
        
        pyautogui.press(key)
        logger.info("‚úÖ –ö–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞")
