import logging
import subprocess
import time
import asyncio
import config
from screen_manager import ScreenManager

logger = logging.getLogger(__name__)

class BrowserController:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º (–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ, –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ø–Ω–¥–µ–∫—Å.–ë—Ä–∞—É–∑–µ—Ä, fallback –Ω–∞ Safari
    """
    
    def __init__(self, browser: str = "Yandex", screen: ScreenManager | None = None):
        """
        Args:
            browser: –ò–º—è –±—Ä–∞—É–∑–µ—Ä–∞ ("Yandex", "Safari", "Chrome")
            screen: –≠–∫–∑–µ–º–ø–ª—è—Ä ScreenManager (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        self.screen_manager = screen or ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
        self.browser = browser
        self.browser_app_name = {
            "Yandex": "Yandex",
            "Safari": "Safari",
            "Chrome": "Google Chrome"
        }.get(browser, "Yandex")

        logger.info(f"üåê –ë—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.browser_app_name}")
    
    def _is_browser_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä"""
        check_script = f'''
        tell application "System Events"
            set isRunning to exists (process "{self.browser_app_name}")
        end tell
        return isRunning
        '''
        result = subprocess.run(['osascript', '-e', check_script], capture_output=True, text=True)
        return 'true' in (result.stdout or '').lower()
    
    async def open_on_secondary_monitor(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –ø–µ—Ä–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
        
        –†–∞–±–æ—Ç–∞–µ—Ç:
        1. –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
        2. –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
        3. –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä –∏ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç –ø–æ —Ä–∞–∑–º–µ—Ä—É
        """
        try:
            logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é {self.browser_app_name}...")
            # 1) –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            if not self._is_browser_running():
                logger.info(f"–ó–∞–ø—É—Å–∫–∞—é {self.browser_app_name}...")
                subprocess.run(['open', '-a', self.browser_app_name])
                await asyncio.sleep(2)
            else:
                logger.info(f"{self.browser_app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")

            # 2) –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)
            display = self.screen_manager.get_secondary_monitor()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
            is_single_monitor = True  # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: len(self.screen_manager.displays) == 1

            # 3) –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –Ω—É–∂–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                try
                    make new window
                end try
                delay 1
            end tell
            tell application "System Events"
                tell application process "{self.browser_app_name}"
                    try
                        set position of front window to {{{display['x']}, {display['y']}}}
                        set size of front window to {{{display['width']}, {display['height']}}}
                    end try
                end tell
            end tell
            '''
            subprocess.run(['osascript', '-e', apple_script], check=False, timeout=5)
            await asyncio.sleep(0.5)

            # –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û: –ª–æ–≥–∏–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
            # if is_single_monitor:
            #     logger.info(f"‚úÖ {self.browser_app_name} –æ—Ç–∫—Ä—ã—Ç (—Ä–µ–∂–∏–º –æ–¥–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞)")
            # else:
            #     logger.info(f"‚úÖ {self.browser_app_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä (–Ω–æ–≤–æ–µ –æ–∫–Ω–æ)")
            
            logger.info(f"‚úÖ {self.browser_app_name} –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –ø–µ—Ä–≤–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ (–≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω)")
        except subprocess.TimeoutExpired:
            logger.warning(f"‚ö†Ô∏è {self.browser_app_name} –æ—Ç–∫—Ä—ã—Ç, –Ω–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ–∫–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞: {e}")

    async def navigate_to(self, url: str):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ URL –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞"""
        logger.info(f"üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è: {url}")

        if self.browser == "Yandex":
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                try
                    tell front window to set URL of active tab to "{url}"
                on error
                    make new document with properties {{URL:"{url}"}}
                end try
            end tell
            '''
        else:
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                try
                    set URL of document 1 to "{url}"
                on error
                    make new document with properties {{URL:"{url}"}}
                end try
            end tell
            '''

        try:
            subprocess.run(['osascript', '-e', apple_script], check=False, timeout=5)
            logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        await asyncio.sleep(2)
