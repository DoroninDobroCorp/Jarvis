import logging
import subprocess
import time
from screen_manager import ScreenManager

logger = logging.getLogger(__name__)

class BrowserController:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–º (–æ—Ç–∫—Ä—ã—Ç–∏–µ, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä)
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ø–Ω–¥–µ–∫—Å.–ë—Ä–∞—É–∑–µ—Ä, fallback –Ω–∞ Safari
    """
    
    def __init__(self, browser: str = "Yandex"):
        """
        Args:
            browser: –ò–º—è –±—Ä–∞—É–∑–µ—Ä–∞ ("Yandex", "Safari", "Chrome")
        """
        self.screen_manager = ScreenManager()
        self.browser = browser
        self.browser_app_name = {
            "Yandex": "Yandex",
            "Safari": "Safari", 
            "Chrome": "Google Chrome"
        }.get(browser, "Yandex")
        
        logger.info(f"üåê –ë—Ä–∞—É–∑–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.browser_app_name}")
    
    def _is_browser_running(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä"""
        check_script = f'tell application "System Events" to (name of processes) contains "{self.browser_app_name}"'
        result = subprocess.run(['osascript', '-e', check_script], capture_output=True, text=True)
        return 'true' in result.stdout.lower()
    
    async def open_on_secondary_monitor(self):
        """
        –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞—ë—Ç –ù–û–í–û–ï –æ–∫–Ω–æ, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
        """
        logger.info(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é {self.browser_app_name}...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
        display = self.screen_manager.get_secondary_monitor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±—Ä–∞—É–∑–µ—Ä
        browser_running = self._is_browser_running()
        
        if not browser_running:
            logger.info(f"–ó–∞–ø—É—Å–∫–∞—é {self.browser_app_name}...")
            subprocess.Popen(['open', '-a', self.browser_app_name])
            time.sleep(3)
        else:
            logger.info(f"{self.browser_app_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        
        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞—ë–º –ù–û–í–û–ï –æ–∫–Ω–æ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
        if self.browser == "Yandex":
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                -- –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –æ–∫–Ω–æ —Å –ø—É—Å—Ç–æ–π –≤–∫–ª–∞–¥–∫–æ–π
                make new window
                delay 1
                -- –ü–µ—Ä–µ–º–µ—â–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä
                set bounds of front window to {{{display['x']}, {display['y']}, {display['x'] + display['width']}, {display['y'] + display['height']}}}
            end tell
            '''
        else:  # Safari, Chrome
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                make new document
                delay 1
                set bounds of front window to {{{display['x']}, {display['y']}, {display['x'] + display['width']}, {display['y'] + display['height']}}}
            end tell
            '''
        
        try:
            subprocess.run(['osascript', '-e', apple_script], check=True, timeout=10)
            logger.info(f"‚úÖ {self.browser_app_name} –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –≤—Ç–æ—Ä–æ–π –º–æ–Ω–∏—Ç–æ—Ä (–Ω–æ–≤–æ–µ –æ–∫–Ω–æ)")
        except subprocess.TimeoutExpired:
            logger.warning(f"‚ö†Ô∏è {self.browser_app_name} –æ—Ç–∫—Ä—ã—Ç, –Ω–æ —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ–∫–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ–∫–Ω–∞: {e}")
    
    async def navigate_to(self, url: str):
        """
        –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ URL –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –æ–∫–Ω–µ –±—Ä–∞—É–∑–µ—Ä–∞
        """
        logger.info(f"üîó –ù–∞–≤–∏–≥–∞—Ü–∏—è: {url}")
        
        if self.browser == "Yandex":
            # –Ø–Ω–¥–µ–∫—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç set URL
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                set URL of active tab of front window to "{url}"
            end tell
            '''
        else:  # Safari, Chrome
            apple_script = f'''
            tell application "{self.browser_app_name}"
                activate
                set URL of document 1 to "{url}"
            end tell
            '''
        
        try:
            subprocess.run(['osascript', '-e', apple_script], check=True, timeout=5)
            logger.info(f"‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ {url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏: {e}")
        
        time.sleep(2)
