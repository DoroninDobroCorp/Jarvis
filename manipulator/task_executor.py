import logging
import asyncio
from telegram import Update

from screen_manager import ScreenManager
from browser_controller import BrowserController
import config

logger = logging.getLogger(__name__)

class TaskExecutor:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
    –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    TODO: –ó–∞–º–µ–Ω–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—ã–µ –∫–ª–∏–∫–∏ –Ω–∞ Playwright –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∑–∞–¥–∞—á
    """
    
    def __init__(self):
        self.screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
        self.browser = BrowserController(browser=config.DEFAULT_BROWSER)
    
    async def execute(self, task_plan: str, update: Update) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ
        
        Args:
            task_plan: –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç Gemini
            update: Telegram update –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞:\n{task_plan}")
        
        try:
            # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
            if any(word in task_plan.lower() for word in ['–±—Ä–∞—É–∑–µ—Ä', 'youtube', '–Ω–∞–π—Ç–∏', '–≤–∏–¥–µ–æ', '—Å–∞–π—Ç', '–æ—Ç–∫—Ä—ã—Ç—å']):
                return await self._execute_browser_task(task_plan, update)
            
            # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
            return "–ë–∞–∑–æ–≤—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏ —Å –±—Ä–∞—É–∑–µ—Ä–æ–º."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
            raise
    
    async def _execute_browser_task(self, task_plan: str, update: Update) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –±—Ä–∞—É–∑–µ—Ä–æ–º
        
        TODO: –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ Playwright (—Å–º. AUTOMATION_RULES.md)
        """
        logger.info("üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É —Å –±—Ä–∞—É–∑–µ—Ä–æ–º")
        
        # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        await update.message.reply_text("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ...")
        await self.browser.open_on_secondary_monitor()
        await asyncio.sleep(2)
        
        # 2. –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await update.message.reply_text("üì∏ –î–µ–ª–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...")
        screenshot_path = self.screen.capture_secondary_monitor()
        
        # –í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–õ–£–®–ö–ê: Vision API –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        await update.message.reply_text(
            "‚ö†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ.\n"
            "–ù—É–∂–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–∞ Playwright (—Å–º. AUTOMATION_RULES.md)"
        )
        
        return "–ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç, –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
