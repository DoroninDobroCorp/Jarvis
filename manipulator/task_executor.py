import logging
import asyncio
from telegram import Update
import yaml

from screen_manager import ScreenManager
from browser_controller import BrowserController
from iterative_planner import IterativePlanner
import config

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
with open('system_capabilities.yaml', 'r', encoding='utf-8') as f:
    CAPABILITIES = yaml.safe_load(f)

class TaskExecutor:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
    """
    
    def __init__(self):
        self.screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
        self.browser = BrowserController(browser=config.DEFAULT_BROWSER, screen=self.screen)
        # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à ScreenManager –≤ planner —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.planner = IterativePlanner(api_key=config.GEMINI_API_KEY, screen_manager=self.screen)
    
    def _detect_task_type(self, task_plan: str) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ capabilities
        
        Returns:
            'browser' | 'app' | 'unknown'
        """
        task_lower = task_plan.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–æ–≤ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        browser_keywords = ['chrome', 'safari', 'yandex', 'firefox', 'browser', 'tor browser']
        if any(browser in task_lower for browser in browser_keywords):
            return 'browser'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–æ–≤/–ø–æ–∏—Å–∫–∞
        if any(word in task_lower for word in ['youtube', 'google', '—Å–∞–π—Ç', '–Ω–∞–π—Ç–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ', '–ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ']):
            return 'browser'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        for app in CAPABILITIES['applications']:
            if app.lower() in task_lower:
                logger.info(f"üì± –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {app}")
                return 'app'
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞)
        logger.info("‚ùì –¢–∏–ø –∑–∞–¥–∞—á–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º")
        return 'app'
    
    async def execute(self, task_plan: str, update: Update) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–ª–∞–Ω –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ
        
        Args:
            task_plan: –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –æ—Ç Gemini
            update: Telegram update –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        logger.info(f"üéØ –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞:\n{task_plan}")
        
        try:
            task_type = self._detect_task_type(task_plan)
            
            if task_type == 'browser':
                return await self._execute_browser_task(task_plan, update)
            elif task_type == 'app':
                return await self._execute_app_task(task_plan, update)
            else:
                return await self._execute_app_task(task_plan, update)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}", exc_info=True)
            raise
    
    async def _execute_browser_task(self, task_plan: str, update: Update) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –±—Ä–∞—É–∑–µ—Ä–æ–º —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        """
        logger.info("üåê –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É —Å –±—Ä–∞—É–∑–µ—Ä–æ–º")
        
        # 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        await update.message.reply_text("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...")
        await self.browser.open_on_secondary_monitor()
        await asyncio.sleep(2)
        
        # 2. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
        await update.message.reply_text("ü§ñ –ü–ª–∞–Ω–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏—è...")
        
        try:
            plan = await self.planner.create_initial_plan(task_plan)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è Telegram
            plan_text = f"üìã *–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω*\n\nüéØ *–¶–µ–ª—å:* {plan['goal']}\n\n*–®–∞–≥–∏:*\n"
            for i, step in enumerate(plan['steps'], 1):
                action = step['action']
                reasoning = step.get('reasoning', '')[:50]
                plan_text += f"{i}. {action} - {reasoning}...\n"
            
            await update.message.reply_text(plan_text, parse_mode='Markdown')
            
            # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å replan
            steps_done = []
            current_steps = plan['steps']
            monitor_info = self.screen.get_secondary_monitor_info()
            
            while current_steps:
                for step in current_steps:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                    result = await self.planner.execute_step(step, monitor_info)
                    
                    step_desc = f"{step['action']} {step.get('params', {})}"
                    steps_done.append(step_desc)
                    
                    if result['success']:
                        logger.info(f"‚úÖ {result['result']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è {result['result']}")
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω replan
                    if result.get('needs_replan'):
                        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
                        
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                        screenshot = self.screen.capture_secondary_monitor()
                        await asyncio.sleep(1)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        from self_correcting_executor import SelfCorrectingExecutor
                        executor = SelfCorrectingExecutor()
                        verification = await executor.verify_task_completion(screenshot, plan['goal'])
                        
                        current_state = verification.get('explanation', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        if verification.get('completed'):
                            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                            return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                        
                        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                        new_plan = await self.planner.replan(
                            screenshot_path=screenshot,
                            original_goal=plan['goal'],
                            current_state=current_state,
                            steps_done=steps_done
                        )
                        
                        if not new_plan.get('steps'):
                            # –ò–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
                            if verification.get('completed'):
                                await update.message.reply_text("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                                return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                            else:
                                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
                                return "–ó–∞—Å—Ç—Ä—è–ª–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                        
                        current_steps = new_plan['steps']
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                        new_plan_text = f"üìã *–ù–æ–≤—ã–π –ø–ª–∞–Ω* ({len(current_steps)} —à–∞–≥–æ–≤):\n"
                        for i, step in enumerate(current_steps, 1):
                            action = step['action']
                            reasoning = step.get('reasoning', '')[:40]
                            new_plan_text += f"{i}. {action} - {reasoning}...\n"
                        
                        await update.message.reply_text(new_plan_text, parse_mode='Markdown')
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                else:
                    # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ replan
                    current_steps = []
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            screenshot = self.screen.capture_secondary_monitor()
            from self_correcting_executor import SelfCorrectingExecutor
            executor = SelfCorrectingExecutor()
            verification = await executor.verify_task_completion(screenshot, plan['goal'])
            
            if verification.get('completed'):
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ\n"
                    f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {verification.get('explanation', '')}"
                )
                return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def _execute_app_task(self, task_plan: str, update: Update) -> str:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        –ë–ï–ó –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        """
        logger.info("üì± –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ë–ï–ó –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
        await update.message.reply_text("ü§ñ –ü–ª–∞–Ω–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏—è...")
        
        try:
            plan = await self.planner.create_initial_plan(task_plan)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–ª—è Telegram
            plan_text = f"üìã *–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω*\n\nüéØ *–¶–µ–ª—å:* {plan['goal']}\n\n*–®–∞–≥–∏:*\n"
            for i, step in enumerate(plan['steps'], 1):
                action = step['action']
                reasoning = step.get('reasoning', '')[:50]
                plan_text += f"{i}. {action} - {reasoning}...\n"
            
            await update.message.reply_text(plan_text, parse_mode='Markdown')
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å replan
            steps_done = []
            current_steps = plan['steps']
            monitor_info = self.screen.get_secondary_monitor_info()
            
            while current_steps:
                for step in current_steps:
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                    result = await self.planner.execute_step(step, monitor_info)
                    
                    step_desc = f"{step['action']} {step.get('params', {})}"
                    steps_done.append(step_desc)
                    
                    if result['success']:
                        logger.info(f"‚úÖ {result['result']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è {result['result']}")
                    
                    # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω replan
                    if result.get('needs_replan'):
                        await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é...")
                        
                        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                        screenshot = self.screen.capture_secondary_monitor()
                        await asyncio.sleep(1)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        from self_correcting_executor import SelfCorrectingExecutor
                        executor = SelfCorrectingExecutor()
                        verification = await executor.verify_task_completion(screenshot, plan['goal'])
                        
                        current_state = verification.get('explanation', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        if verification.get('completed'):
                            await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                            return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                        
                        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                        new_plan = await self.planner.replan(
                            screenshot_path=screenshot,
                            original_goal=plan['goal'],
                            current_state=current_state,
                            steps_done=steps_done
                        )
                        
                        if not new_plan.get('steps'):
                            # –ò–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
                            if verification.get('completed'):
                                await update.message.reply_text("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                                return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                            else:
                                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
                                return "–ó–∞—Å—Ç—Ä—è–ª–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                        
                        current_steps = new_plan['steps']
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                        new_plan_text = f"üìã *–ù–æ–≤—ã–π –ø–ª–∞–Ω* ({len(current_steps)} —à–∞–≥–æ–≤):\n"
                        for i, step in enumerate(current_steps, 1):
                            action = step['action']
                            reasoning = step.get('reasoning', '')[:40]
                            new_plan_text += f"{i}. {action} - {reasoning}...\n"
                        
                        await update.message.reply_text(new_plan_text, parse_mode='Markdown')
                        break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                else:
                    # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ replan
                    current_steps = []
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            screenshot = self.screen.capture_secondary_monitor()
            from self_correcting_executor import SelfCorrectingExecutor
            executor = SelfCorrectingExecutor()
            verification = await executor.verify_task_completion(screenshot, plan['goal'])
            
            if verification.get('completed'):
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            else:
                await update.message.reply_text(
                    f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ\n"
                    f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {verification.get('explanation', '')}"
                )
                return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return f"–û—à–∏–±–∫–∞: {e}"
