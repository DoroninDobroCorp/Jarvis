# –†–ï–ì–£–õ–Ø–†–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≤ –ø–∞–ø–∫–µ
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –ø–∞–ø–∫–µ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
- –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã
- –ü—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

–†–∞–±–æ—Ç–∞–µ—Ç —Å –õ–Æ–ë–û–ô –ø–∞–ø–∫–æ–π –∏ –õ–Æ–ë–û–ô –∫–æ–º–∞–Ω–¥–æ–π, –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º.
"""
import asyncio
import logging
import sys
from pathlib import Path
import subprocess
import os
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from command_interpreter import CommandInterpreter

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def open_terminal_in_directory(directory: str) -> bool:
    """
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç Terminal.app –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        
    Returns:
        True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if not os.path.exists(directory):
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {directory}")
            return False
        
        # AppleScript –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –ø–∞–ø–∫–µ
        script = f'''
        tell application "Terminal"
            activate
            do script "cd {directory}"
        end tell
        '''
        
        result = subprocess.run(['osascript', '-e', script],
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print(f"‚úÖ –¢–µ—Ä–º–∏–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç –≤: {directory}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {result.stderr}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: {e}")
        return False

def execute_command_in_terminal(command: str, directory: str) -> bool:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    
    Args:
        command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞
    """
    try:
        # AppleScript –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        script = f'''
        tell application "Terminal"
            activate
            do script "cd {directory} && {command}" in window 1
        end tell
        '''
        
        result = subprocess.run(['osascript', '-e', script],
                              capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞: {command}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        return False

def verify_process_running(process_name: str, timeout: int = 5) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
    
    Args:
        process_name: –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        timeout: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        True –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω
    """
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ '{process_name}'...")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            result = subprocess.run(['pgrep', '-f', process_name],
                                  capture_output=True, text=True, timeout=2)
            
            if result.returncode == 0 and result.stdout.strip():
                pids = result.stdout.strip().split('\n')
                print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –Ω–∞–π–¥–µ–Ω (PID: {pids})")
                return True
                
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
        
        time.sleep(0.5)
    
    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å '{process_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    return False

async def test_terminal_command(command_text: str, directory: str, app_command: str, 
                                process_name: str = None):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    
    Args:
        command_text: –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ –ø–∞–ø–∫–µ X –∏ –∑–∞–ø—É—Å—Ç–∏ Y")
        directory: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        app_command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        process_name: –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    """
    print("\n" + "="*70)
    print(f"üíª –¢–ï–°–¢: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã")
    print("="*70)
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command_text}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    print(f"–ó–∞–ø—É—Å–∫–∞–µ–º–∞—è –∫–æ–º–∞–Ω–¥–∞: {app_command}")
    
    interpreter = CommandInterpreter()
    
    # 1. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    print("\nüìù –®–∞–≥ 1: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã...")
    task_plan = await interpreter.understand_command(command_text)
    print(f"–ü–ª–∞–Ω: {task_plan}")
    
    # 2. –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    print("\nüìù –®–∞–≥ 2: –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    terminal_opened = open_terminal_in_directory(directory)
    
    if not terminal_opened:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª")
        return False
    
    await asyncio.sleep(2)
    
    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    print("\n‚ñ∂Ô∏è –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã...")
    command_executed = execute_command_in_terminal(app_command, directory)
    
    if not command_executed:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É")
        return False
    
    await asyncio.sleep(3)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –∏–º—è)
    if process_name:
        process_running = verify_process_running(process_name, timeout=10)
    else:
        print("\n‚ö†Ô∏è –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø—É—Å–∫–∞")
        process_running = True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
    
    # –ò—Ç–æ–≥
    print("\n" + "="*70)
    if terminal_opened and command_executed and process_running:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢–µ—Ä–º–∏–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç, –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é")
        return False

async def main():
    print("\n" + "#"*70)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–ö–†–´–¢–ò–Ø –¢–ï–†–ú–ò–ù–ê–õ–ê –ò –ó–ê–ü–£–°–ö–ê –ö–û–ú–ê–ù–î–´")
    print("#"*70)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ø–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    home_dir = os.path.expanduser("~")
    
    # –ü—Ä–∏–º–µ—Ä 1: –ó–∞–ø—É—Å–∫ droid –≤ –ø–∞–ø–∫–µ detective-board (–∫–∞–∫ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏)
    project_path = os.path.join(home_dir, "VovkaNowEngineer", "+Jarvis", "detective-board")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    if not os.path.exists(project_path):
        print(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {project_path}")
        print("   –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        test_path = os.path.join(home_dir, "test_terminal")
        os.makedirs(test_path, exist_ok=True)
        project_path = test_path
    
    await test_terminal_command(
        command_text=f"–û—Ç–∫—Ä–æ–π –∫–æ–Ω—Å–æ–ª—å –≤ –ø–∞–ø–∫–µ {project_path} –∏ –∑–∞–ø—É—Å—Ç–∏ droid",
        directory=project_path,
        app_command="droid",  # –ò–ª–∏ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞
        process_name="droid"  # –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    )
    
    print("\n" + "#"*70)
    print("‚ú® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("#"*70)
    print("\nüí° –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω")
    print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –õ–Æ–ë–û–ô –ø–∞–ø–∫–æ–π –∏ –õ–Æ–ë–û–ô –∫–æ–º–∞–Ω–¥–æ–π")
    print("   –ü—Ä–∏–º–µ—Ä—ã:")
    print("   - '–û—Ç–∫—Ä–æ–π —Ç–µ—Ä–º–∏–Ω–∞–ª –≤ ~/Documents –∏ –∑–∞–ø—É—Å—Ç–∏ python script.py'")
    print("   - '–ó–∞–ø—É—Å—Ç–∏ npm start –≤ –ø–∞–ø–∫–µ ~/projects/my-app'")
    print("   - '–û—Ç–∫—Ä–æ–π –∫–æ–Ω—Å–æ–ª—å –≤ ~/Downloads –∏ –∑–∞–ø—É—Å—Ç–∏ ls -la'")
    print("\nüí° –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ pgrep –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞")

if __name__ == '__main__':
    asyncio.run(main())
