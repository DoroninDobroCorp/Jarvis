# –†–ï–ì–£–õ–Ø–†–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏ –≤ Spotify
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –ø–µ—Å–Ω–∏ –≤ Spotify

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –û—Ç–∫—Ä—ã—Ç–∏–µ Spotify
- –ü–æ–∏—Å–∫ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Å–Ω–∏
- –†–µ–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AppleScript
- –ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏–≥—Ä–∞—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞

–†–∞–±–æ—Ç–∞–µ—Ç —Å –õ–Æ–ë–û–ô –ø–µ—Å–Ω–µ–π, –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º.
"""
import asyncio
import logging
import sys
from pathlib import Path
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from command_interpreter import CommandInterpreter
from task_executor import TaskExecutor

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def is_spotify_running() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Spotify"""
    try:
        script = 'tell application "System Events" to (name of processes) contains "Spotify"'
        result = subprocess.run(['osascript', '-e', script], 
                              capture_output=True, text=True, timeout=5)
        return 'true' in result.stdout.lower()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Spotify: {e}")
        return False

def get_current_track() -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ –≤ Spotify
    
    Returns:
        dict —Å –ø–æ–ª—è–º–∏: name, artist, album, player_state
    """
    try:
        script = '''
        tell application "Spotify"
            set trackName to name of current track
            set trackArtist to artist of current track
            set trackAlbum to album of current track
            set playerState to player state as string
            return trackName & "|" & trackArtist & "|" & trackAlbum & "|" & playerState
        end tell
        '''
        result = subprocess.run(['osascript', '-e', script],
                              capture_output=True, text=True, timeout=5)
        
        if result.returncode == 0:
            parts = result.stdout.strip().split('|')
            if len(parts) >= 4:
                return {
                    'name': parts[0],
                    'artist': parts[1],
                    'album': parts[2],
                    'player_state': parts[3]
                }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")
    
    return {}

def verify_track_playing(expected_keywords: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏–≥—Ä–∞–µ—Ç —Ç—Ä–µ–∫ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    
    Args:
        expected_keywords: –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
        
    Returns:
        True –µ—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –≤ Spotify...")
    
    track_info = get_current_track()
    
    if not track_info:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ")
        return False
    
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {track_info.get('name', 'N/A')}")
    print(f"   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track_info.get('artist', 'N/A')}")
    print(f"   –ê–ª—å–±–æ–º: {track_info.get('album', 'N/A')}")
    print(f"   –°—Ç–∞—Ç—É—Å: {track_info.get('player_state', 'N/A')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    if track_info.get('player_state') != 'playing':
        print(f"‚ö†Ô∏è –¢—Ä–µ–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {track_info.get('player_state')})")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    track_text = f"{track_info.get('name', '')} {track_info.get('artist', '')}".lower()
    found_keywords = [kw for kw in expected_keywords if kw.lower() in track_text]
    
    if found_keywords:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
        return True
    else:
        print(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print(f"   –ò—Å–∫–∞–ª–∏: {expected_keywords}")
        print(f"   –í —Å—Ç—Ä–æ–∫–µ: {track_text}")
        return False

async def test_spotify_playback(command: str, track_keywords: list[str]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –º—É–∑—ã–∫–∏ –≤ Spotify
    
    Args:
        command: –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–∫–ª—é—á–∏ –Ω–∞ Spotify –ø–µ—Å–Ω—é...")
        track_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
    """
    print("\n" + "="*70)
    print(f"üéµ –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –º—É–∑—ã–∫–∏ –≤ Spotify")
    print("="*70)
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {track_keywords}")
    
    interpreter = CommandInterpreter()
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Spotify
    print("\nüìù –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Spotify...")
    if not is_spotify_running():
        print("‚ö†Ô∏è Spotify –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...")
        subprocess.Popen(['open', '-a', 'Spotify'])
        await asyncio.sleep(5)
    else:
        print("‚úÖ Spotify —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
    
    # 2. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    print("\nüìù –®–∞–≥ 2: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã...")
    task_plan = await interpreter.understand_command(command)
    print(f"–ü–ª–∞–Ω: {task_plan}")
    
    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ AppleScript –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    print("\n‚ñ∂Ô∏è –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    print("‚è∏Ô∏è –ü–∞—É–∑–∞ 15 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
    await asyncio.sleep(15)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
    is_playing = verify_track_playing(track_keywords)
    
    # –ò—Ç–æ–≥
    print("\n" + "="*70)
    if is_playing:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –¢—Ä–µ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ Spotify")
        return True
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –¢—Ä–µ–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

async def main():
    print("\n" + "#"*70)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –ú–£–ó–´–ö–ò –í SPOTIFY")
    print("#"*70)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ü–µ—Å–Ω—è –∏–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    await test_spotify_playback(
        command="–í–∫–ª—é—á–∏ –Ω–∞ Spotify –ø–µ—Å–Ω—é –í–∏–Ω—Ç–æ–≤–∫–∞ —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫",
        track_keywords=["–≤–∏–Ω—Ç–æ–≤–∫–∞", "–ø—Ä–∞–∑–¥–Ω–∏–∫"]
    )
    
    print("\n" + "#"*70)
    print("‚ú® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("#"*70)
    print("\nüí° –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω")
    print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –õ–Æ–ë–û–ô –ø–µ—Å–Ω–µ–π, –º–µ–Ω—è—è command –∏ track_keywords")
    print("   –ü—Ä–∏–º–µ—Ä—ã:")
    print("   - '–í–∫–ª—é—á–∏ Rammstein Du Hast' ‚Üí keywords=['rammstein', 'du hast']")
    print("   - '–ó–∞–ø—É—Å—Ç–∏ –ü–æ—à–ª–∞—è –ú–æ–ª–ª–∏' ‚Üí keywords=['–ø–æ—à–ª–∞—è –º–æ–ª–ª–∏']")
    print("   - '–í–∫–ª—é—á–∏ Satisfaction –æ—Ç Rolling Stones' ‚Üí keywords=['satisfaction', 'rolling']")
    print("\nüí° –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ AppleScript –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")

if __name__ == '__main__':
    asyncio.run(main())
