"""
–¢–µ—Å—Ç Chrome DevTools MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from chrome_mcp_client import ChromeMCPClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/test_chrome_mcp.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome DevTools MCP"""
    logger.info("=" * 60)
    logger.info("–¢–ï–°–¢ 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chrome DevTools MCP")
    logger.info("=" * 60)
    
    client = ChromeMCPClient()
    
    try:
        success = await client.connect()
        if success:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}", exc_info=True)
        return False
    finally:
        await client.disconnect()


async def test_list_tools():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    logger.info("\n" + "=" * 60)
    logger.info("–¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    logger.info("=" * 60)
    
    client = ChromeMCPClient()
    
    try:
        await client.connect()
        
        tools = await client.list_tools()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        
        if len(tools) > 0:
            logger.info("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            for i, tool in enumerate(tools, 1):
                tool_name = tool.name if hasattr(tool, 'name') else 'Unknown'
                tool_desc = tool.description if hasattr(tool, 'description') else 'N/A'
                logger.info(f"  {i}. {tool_name}")
                logger.info(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {tool_desc}")
            
            logger.info("‚úÖ –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω")
            return True
        else:
            logger.warning("‚ö†Ô∏è  –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}", exc_info=True)
        return False
    finally:
        await client.disconnect()


async def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞)"""
    logger.info("\n" + "=" * 60)
    logger.info("–¢–ï–°–¢ 3: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
    logger.info("=" * 60)
    
    client = ChromeMCPClient()
    
    try:
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
        methods = [
            'navigate_to_url',
            'click_element', 
            'execute_javascript',
            'get_page_content',
            'screenshot'
        ]
        
        for method_name in methods:
            if hasattr(client, method_name):
                logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.error(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        
        logger.info("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
    finally:
        await client.disconnect()


async def test_reconnection():
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    logger.info("\n" + "=" * 60)
    logger.info("–¢–ï–°–¢ 4: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    logger.info("=" * 60)
    
    client = ChromeMCPClient()
    
    try:
        # –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("–ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await client.connect()
        logger.info("‚úÖ –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...")
        await client.disconnect()
        logger.info("‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
        await client.connect()
        logger.info("‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}", exc_info=True)
        return False
    finally:
        await client.disconnect()


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("\n" + "üß™" * 30)
    logger.info("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í CHROME DEVTOOLS MCP")
    logger.info("üß™" * 30 + "\n")
    
    tests = [
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_connection),
        ("–°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_list_tools),
        ("–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", test_basic_functionality),
        ("–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_reconnection),
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)
    
    # –ò—Ç–æ–≥–∏
    logger.info("\n" + "=" * 60)
    logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    logger.info("=" * 60)
    
    passed = sum(1 for r in results.values() if r)
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        logger.info(f"{status}: {test_name}")
    
    logger.info("\n" + "-" * 60)
    logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} ({passed/total*100:.1f}%)")
    logger.info("-" * 60)
    
    if passed == total:
        logger.info("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        logger.error("‚ùå –ï–°–¢–¨ –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´")
        return False


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = asyncio.run(run_all_tests())
    
    # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º
    sys.exit(0 if success else 1)
