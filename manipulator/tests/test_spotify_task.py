#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ Telegram

–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏,
–ª–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å.
"""
import asyncio
import logging
import sys
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout),
    ]
)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
log_dir = Path('logs')
log_dir.mkdir(exist_ok=True)
timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
log_file = log_dir / f'test_spotify_{timestamp}.log'

file_handler = logging.FileHandler(log_file, encoding='utf-8')
file_handler.setLevel(logging.DEBUG)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))

# –î–æ–±–∞–≤–ª—è–µ–º file handler –∫–æ –≤—Å–µ–º –ª–æ–≥–≥–µ—Ä–∞–º
for logger_name in ['', 'iterative_planner', 'self_correcting_executor', 'screen_manager']:
    logger = logging.getLogger(logger_name)
    logger.addHandler(file_handler)
    logger.setLevel(logging.DEBUG)

logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ò–º–ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import config
from iterative_planner import IterativePlanner
from screen_manager import ScreenManager
from self_correcting_executor import SelfCorrectingExecutor


class FakeUpdate:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Update –∏–∑ Telegram"""
    class FakeMessage:
        async def reply_text(self, text, parse_mode=None):
            print(f"\n{'='*70}")
            print(f"üì± [BOT MESSAGE]")
            print(f"{'='*70}")
            print(text)
            print(f"{'='*70}\n")
    
    def __init__(self):
        self.message = self.FakeMessage()


async def execute_app_task(task_plan: str, planner: IterativePlanner, screen: ScreenManager) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞—á—É —Å –¥–µ—Å–∫—Ç–æ–ø–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    –ö–æ–ø–∏—è _execute_app_task –∏–∑ task_executor.py –Ω–æ –±–µ–∑ Telegram
    """
    logger.info("üì± –í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    
    fake_update = FakeUpdate()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
    await fake_update.message.reply_text("ü§ñ –ü–ª–∞–Ω–∏—Ä—É—é –¥–µ–π—Å—Ç–≤–∏—è...")
    
    try:
        plan = await planner.create_initial_plan(task_plan)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω
        plan_text = f"üìã *–ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω*\n\nüéØ *–¶–µ–ª—å:* {plan['goal']}\n\n*–®–∞–≥–∏:*\n"
        for i, step in enumerate(plan['steps'], 1):
            action = step['action']
            reasoning = step.get('reasoning', '')[:50]
            plan_text += f"{i}. {action} - {reasoning}...\n"
        
        await fake_update.message.reply_text(plan_text)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å replan
        steps_done = []
        current_steps = plan['steps']
        monitor_info = screen.get_secondary_monitor_info()
        
        replan_counter = 0
        max_replans = 10
        
        while current_steps and replan_counter < max_replans:
            for step in current_steps:
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                logger.info(f"\n{'='*70}")
                logger.info(f"üîß –í—ã–ø–æ–ª–Ω—è—é —à–∞–≥: {step['action']}")
                logger.info(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {step.get('params', {})}")
                logger.info(f"   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {step.get('reasoning', '')}")
                logger.info(f"{'='*70}")
                
                result = await planner.execute_step(step, monitor_info)
                
                step_desc = f"{step['action']} {step.get('params', {})}"
                steps_done.append(step_desc)
                
                if result['success']:
                    logger.info(f"‚úÖ {result['result']}")
                else:
                    logger.warning(f"‚ö†Ô∏è {result['result']}")
                
                # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω replan
                if result.get('needs_replan'):
                    replan_counter += 1
                    await fake_update.message.reply_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é... (replan {replan_counter}/{max_replans})")
                    
                    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
                    screenshot = screen.capture_secondary_monitor()
                    await asyncio.sleep(1)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    executor = SelfCorrectingExecutor(screen)
                    verification = await executor.verify_task_completion(screenshot, plan['goal'])
                    
                    current_state = verification.get('explanation', '–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    
                    logger.info(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                    logger.info(f"   –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {verification.get('completed')}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if verification.get('completed'):
                        await fake_update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
                        return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    
                    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                    logger.info(f"üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –Ω–æ–≤—ã–π –ø–ª–∞–Ω...")
                    logger.info(f"   –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–ª—å: {plan['goal']}")
                    logger.info(f"   –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
                    logger.info(f"   –®–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã: {steps_done}")
                    
                    new_plan = await planner.replan(
                        screenshot_path=screenshot,
                        original_goal=plan['goal'],
                        current_state=current_state,
                        steps_done=steps_done
                    )
                    
                    if not new_plan.get('steps'):
                        # –ò–ª–∏ —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª–∏
                        if verification.get('completed'):
                            await fake_update.message.reply_text("‚úÖ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞!")
                            return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
                        else:
                            await fake_update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
                            return "–ó–∞—Å—Ç—Ä—è–ª–∏ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏"
                    
                    current_steps = new_plan['steps']
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
                    new_plan_text = f"üìã *–ù–æ–≤—ã–π –ø–ª–∞–Ω* ({len(current_steps)} —à–∞–≥–æ–≤):\n"
                    for i, step in enumerate(current_steps, 1):
                        action = step['action']
                        reasoning = step.get('reasoning', '')[:40]
                        new_plan_text += f"{i}. {action} - {reasoning}...\n"
                    
                    await fake_update.message.reply_text(new_plan_text)
                    break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ü–∏–∫–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω
            else:
                # –í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ replan
                current_steps = []
        
        if replan_counter >= max_replans:
            await fake_update.message.reply_text(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç replans ({max_replans})")
            return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç replans"
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        screenshot = screen.capture_secondary_monitor()
        executor = SelfCorrectingExecutor(screen)
        verification = await executor.verify_task_completion(screenshot, plan['goal'])
        
        if verification.get('completed'):
            await fake_update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            return "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
        else:
            await fake_update.message.reply_text(
                f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {verification.get('explanation', '')}"
            )
            return "–í—ã–ø–æ–ª–Ω–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}", exc_info=True)
        await fake_update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    print(f"\n{'='*70}")
    print(f"üéØ –¢–ï–°–¢: –í–∫–ª—é—á–∏ –Ω–∞ —Å–ø–æ—Ç–∏—Ñ–∞–µ –ø–µ—Å–Ω—é '–í–∏–Ω—Ç–æ–≤–∫–∞ —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫'")
    print(f"{'='*70}")
    print(f"üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {log_file}")
    print(f"{'='*70}\n")
    
    # –ó–∞–¥–∞—á–∞
    task = "–í–∫–ª—é—á–∏ –Ω–∞ —Å–ø–æ—Ç–∏—Ñ–∞–µ –ø–µ—Å–Ω—é '–í–∏–Ω—Ç–æ–≤–∫–∞ —ç—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫'"
    
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç")
    logger.info(f"   –ó–∞–¥–∞—á–∞: {task}")
    logger.info(f"   –õ–æ–≥ —Ñ–∞–π–ª: {log_file}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
    planner = IterativePlanner(api_key=config.GEMINI_API_KEY, screen_manager=screen)
    
    logger.info("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
    try:
        result = await execute_app_task(task, planner, screen)
        
        print(f"\n{'='*70}")
        print(f"üèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print(f"{'='*70}")
        print(f"   {result}")
        print(f"{'='*70}")
        print(f"\nüìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ –≤: {log_file}\n")
        
        logger.info(f"üèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {result}")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n")
        print(f"üìù –õ–æ–≥ –æ—à–∏–±–∫–∏ –≤: {log_file}\n")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
        logger.info("‚ö†Ô∏è –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
