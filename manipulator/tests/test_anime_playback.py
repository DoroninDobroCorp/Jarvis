# –†–ï–ì–£–õ–Ø–†–ù–´–ô –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω (YouTube/–∞–Ω–∏–º–µ)
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
- –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
- –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ
- –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
- –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã

–†–∞–±–æ—Ç–∞–µ—Ç —Å –õ–Æ–ë–´–ú –≤–∏–¥–µ–æ/–∞–Ω–∏–º–µ, –Ω–µ —Ç–æ–ª—å–∫–æ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–∏–º–µ—Ä–æ–º.
"""
import asyncio
import logging
import sys
from pathlib import Path
import time

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from command_interpreter import CommandInterpreter
from task_executor import TaskExecutor
from screen_manager import ScreenManager
from PIL import Image
import pytesseract

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def verify_video_playback(screen: ScreenManager, video_title_keywords: list[str]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–∏–¥–µ–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å
    
    Args:
        screen: ScreenManager instance
        video_title_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        True –µ—Å–ª–∏ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç...")
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    screenshot_path = screen.capture_secondary_monitor()
    
    # OCR –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    try:
        img = Image.open(screenshot_path)
        text = pytesseract.image_to_string(img, lang='rus+eng').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        found_keywords = [kw for kw in video_title_keywords if kw.lower() in text]
        
        if found_keywords:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
            return True
        else:
            print(f"‚ö†Ô∏è –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ")
            print(f"   –ò—Å–∫–∞–ª–∏: {video_title_keywords}")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OCR: {e}")
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ OCR, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—Ä—É—á–Ω—É—é")
        print(f"   –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_path}")
        return False

async def verify_fullscreen(screen: ScreenManager) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–∏–¥–µ–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    
    –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:
    - –ù–µ—Ç UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
    - –ß–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã —Å–≤–µ—Ä—Ö—É/—Å–Ω–∏–∑—É (–∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω)
    """
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞...")
    
    screenshot_path = screen.capture_secondary_monitor()
    
    try:
        img = Image.open(screenshot_path)
        width, height = img.size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–æ–ª–æ—Å—É (–≥–¥–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å UI –±—Ä–∞—É–∑–µ—Ä–∞)
        # –í –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç
        top_strip = img.crop((0, 0, width, 100))
        
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å–µ
        pixels = top_strip.getdata()
        dark_pixels = sum(1 for pixel in pixels if sum(pixel[:3]) < 100)
        total_pixels = len(pixels)
        dark_ratio = dark_pixels / total_pixels
        
        if dark_ratio > 0.7:  # –ë–æ–ª—å—à–µ 70% —Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
            print(f"‚úÖ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (—Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {dark_ratio:.1%})")
            return True
        else:
            print(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –ù–ï –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º (—Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {dark_ratio:.1%})")
            return False
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")
        return False

async def test_video_playback(command: str, title_keywords: list[str]):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
    
    Args:
        command: –ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–í–∫–ª—é—á–∏ –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é...")
        title_keywords: –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    print("\n" + "="*70)
    print(f"üé¨ –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω")
    print("="*70)
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print(f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {title_keywords}")
    
    interpreter = CommandInterpreter()
    executor = TaskExecutor()
    screen = ScreenManager(wait_for_user_idle=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
    
    # 1. –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
    print("\nüìù –®–∞–≥ 1: –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã...")
    task_plan = await interpreter.understand_command(command)
    print(f"–ü–ª–∞–Ω: {task_plan}")
    
    # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–±–µ–∑ Telegram update)
    print("\n‚ñ∂Ô∏è –®–∞–≥ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    # TODO: executor.execute —Ç—Ä–µ–±—É–µ—Ç Update, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å mock –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å API
    # –ü–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–∏–º –≤—Ä—É—á–Ω—É—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    print("‚è∏Ô∏è –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
    print("   –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Ä—É—á–Ω—É—é –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {command}")
    await asyncio.sleep(10)
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
    video_playing = await verify_video_playback(screen, title_keywords)
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    is_fullscreen = await verify_fullscreen(screen)
    
    # –ò—Ç–æ–≥
    print("\n" + "="*70)
    if video_playing and is_fullscreen:
        print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        return True
    elif video_playing:
        print("‚ö†Ô∏è –¢–ï–°–¢ –ß–ê–°–¢–ò–ß–ù–û –ü–†–û–ô–î–ï–ù: –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ, –Ω–æ –Ω–µ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        return False
    else:
        print("‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: –í–∏–¥–µ–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
        return False

async def main():
    print("\n" + "#"*70)
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê –í–ò–î–ï–û –ù–ê –ü–û–õ–ù–´–ô –≠–ö–†–ê–ù")
    print("#"*70)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ê–Ω–∏–º–µ (–∫–∞–∫ –≤ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–∏)
    await test_video_playback(
        command="–í–∫–ª—é—á–∏ –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–µ–∑–æ–Ω–∞ –∞–Ω–∏–º–µ —Å–µ—Ä–∏–∞–ª–∞ –ö–ª–∏–Ω–æ–∫ —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω",
        title_keywords=["–∫–ª–∏–Ω–æ–∫", "demon", "slayer", "—Å–µ–∑–æ–Ω 3"]
    )
    
    print("\n" + "#"*70)
    print("‚ú® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("#"*70)
    print("\nüí° –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —Ç–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω")
    print("   –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å –õ–Æ–ë–´–ú –≤–∏–¥–µ–æ, –º–µ–Ω—è—è command –∏ title_keywords")
    print("   –ù–∞–ø—Ä–∏–º–µ—Ä:")
    print("   - '–í–∫–ª—é—á–∏ –∫–ª–∏–ø Rammstein Du Hast'")
    print("   - '–ó–∞–ø—É—Å—Ç–∏ –ø–µ—Ä–≤—É—é —Å–µ—Ä–∏—é –ê—Ç–∞–∫–∏ —Ç–∏—Ç–∞–Ω–æ–≤'")
    print("   - '–ù–∞–π–¥–∏ –Ω–∞ YouTube —Ç—Ä–µ–π–ª–µ—Ä –î—é–Ω—ã 2'")

if __name__ == '__main__':
    asyncio.run(main())
