#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —á–µ—Ä–µ–∑ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Å –ª–∏–Ω–µ–π–∫–∞–º–∏
–ü–æ–¥—Ö–æ–¥: —Å–ø—Ä–æ—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã -> –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Ç–æ—á–∫—É + –ª–∏–Ω–µ–π–∫–∏ -> —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
"""
import google.generativeai as genai
from PIL import Image, ImageDraw, ImageFont
import subprocess
import re
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ config
sys.path.insert(0, str(Path(__file__).parent.parent))
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=config.GEMINI_API_KEY)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞
LOG_FILE = None


def init_log():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞"""
    global LOG_FILE
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    log_path = f'logs/ruler_finder_{timestamp}.log'
    Path('logs').mkdir(exist_ok=True)
    LOG_FILE = open(log_path, 'w', encoding='utf-8')
    log(f'=== –ù–ê–ß–ê–õ–û –õ–û–ì–ê {timestamp} ===\n')
    return log_path


def log(message):
    """–ó–∞–ø–∏—Å—å –≤ –ª–æ–≥ –∏ –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω"""
    print(message)
    if LOG_FILE:
        LOG_FILE.write(message + '\n')
        LOG_FILE.flush()


def close_log():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞"""
    if LOG_FILE:
        log('\n=== –ö–û–ù–ï–¶ –õ–û–ì–ê ===')
        LOG_FILE.close()


def ask_gemini_coordinates(img):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç Gemini –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–Ω–æ–ø–∫–∏ –ë–ï–ó —Å–µ—Ç–∫–∏
    
    Returns:
        (x, y) –∏–ª–∏ None
    """
    width, height = img.size
    
    prompt = f'''–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–º {width}x{height} –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É "+–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏–∑ Spotify.

–í–ê–ñ–ù–û: 
- –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ (0, 0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –õ–ï–í–û–ú –í–ï–†–•–ù–ï–ú —É–≥–ª—É
- X —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ü–†–ê–í–û (–æ—Ç 0 –¥–æ {width})
- Y —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –í–ù–ò–ó (–æ—Ç 0 –¥–æ {height})

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: X Y
–û–ø–∏—Å–∞–Ω–∏–µ: –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞

–ü—Ä–∏–º–µ—Ä:
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: 520 1650
–û–ø–∏—Å–∞–Ω–∏–µ: –±–µ–ª—ã–π –ø–ª—é—Å–∏–∫ –≤ —Å–µ—Ä–æ–º –∫—Ä—É–≥–µ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –ø–ª–µ–µ—Ä–µ –≤–Ω–∏–∑—É'''

    log('üìù –ü–†–û–ú–ü–¢ (–∑–∞–ø—Ä–æ—Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç):')
    log('=' * 80)
    log(prompt)
    log('=' * 80)
    log('')

    model = genai.GenerativeModel('gemini-2.5-pro')  # –ù–ï 2.0!
    response = model.generate_content([prompt, img])
    
    answer = response.text.strip()
    log(f"üì• –û—Ç–≤–µ—Ç Gemini:\n{answer}\n")
    
    # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    coords_match = re.search(r'–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\s*(\d+)\s+(\d+)', answer)
    if coords_match:
        x = int(coords_match.group(1))
        y = int(coords_match.group(2))
        return (x, y)
    
    log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
    return None


def draw_point_with_rulers(img, x, y, point_radius=8, crop_size=500, zoom_factor=3):
    """
    –í—ã—Ä–µ–∑–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏, –£–í–ï–õ–ò–ß–ò–í–ê–ï–¢, –∑–∞—Ç–µ–º —Ä–∏—Å—É–µ—Ç –ª–∏–Ω–µ–π–∫–∏ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π
    
    Args:
        img: PIL Image (–ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω)
        x, y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–ª–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
        point_radius: —Ä–∞–¥–∏—É—Å —Ç–æ—á–∫–∏ –ù–ê –£–í–ï–õ–ò–ß–ï–ù–ù–û–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–º–∞–ª–µ–Ω—å–∫–∞—è 8px)
        crop_size: —Ä–∞–∑–º–µ—Ä –≤—ã—Ä–µ–∑–∞–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏ (500 = 1000x1000px)
        zoom_factor: –≤–æ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —É–≤–µ–ª–∏—á–∏—Ç—å (3 = 1500x1500px)
    
    Returns:
        PIL Image —Å —Ç–æ—á–∫–æ–π –∏ –ª–∏–Ω–µ–π–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç)
    """
    # 1. –í–´–†–ï–ó–ê–ï–ú –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ —Ç–æ—á–∫–∏
    width, height = img.size
    crop_x1 = max(0, x - crop_size)
    crop_y1 = max(0, y - crop_size)
    crop_x2 = min(width, x + crop_size)
    crop_y2 = min(height, y + crop_size)
    
    cropped = img.crop((crop_x1, crop_y1, crop_x2, crop_y2))
    crop_w, crop_h = cropped.size
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ –≤—ã—Ä–µ–∑–µ (–î–û —É–≤–µ–ª–∏—á–µ–Ω–∏—è)
    local_x = x - crop_x1
    local_y = y - crop_y1
    
    # 2. –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°–ù–ê–ß–ê–õ–ê
    zoomed_w = crop_w * zoom_factor
    zoomed_h = crop_h * zoom_factor
    zoomed = cropped.resize((zoomed_w, zoomed_h), Image.Resampling.LANCZOS)
    
    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    zoomed_x = local_x * zoom_factor
    zoomed_y = local_y * zoom_factor
    
    # 3. –†–∏—Å—É–µ–º –ù–ê –£–í–ï–õ–ò–ß–ï–ù–ù–û–ú –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    draw = ImageDraw.Draw(zoomed)
    
    # –†–∏—Å—É–µ–º –ö–†–ê–°–ù–£–Æ —Ç–æ—á–∫—É
    draw.ellipse([zoomed_x - point_radius, zoomed_y - point_radius, 
                 zoomed_x + point_radius, zoomed_y + point_radius],
                fill='red', outline='white', width=4)
    
    # 4. –õ–ò–ù–ï–ô–ö–ò –†–Ø–î–û–ú —Å —Ç–æ—á–∫–æ–π (0,0) = —Ç–æ—á–∫–∞
    # –õ–∏–Ω–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –†–ï–ê–õ–¨–ù–´–ï –ø–∏–∫—Å–µ–ª–∏ —Å–º–µ—â–µ–Ω–∏—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    
    # –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–ê–Ø –ª–∏–Ω–µ–π–∫–∞ (–†–Ø–î–û–ú —Å —Ç–æ—á–∫–æ–π, –Ω–µ —á–µ—Ä–µ–∑ –Ω–µ—ë)
    ruler_h_offset = 50  # –û—Ç—Å—Ç—É–ø –æ—Ç —Ç–æ—á–∫–∏
    ruler_h_y = zoomed_y + ruler_h_offset
    
    # –õ–∏–Ω–∏—è –ª–∏–Ω–µ–π–∫–∏ (—á–µ—Ä–µ–∑ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    draw.line([(0, ruler_h_y), (zoomed_w, ruler_h_y)], 
              fill='yellow', width=4)
    
    # –ú–µ—Ç–∫–∏: -250 –¥–æ +250 (–∫–∞–∂–¥—ã–µ 10px —Ä–µ–∞–ª—å–Ω—ã—Ö)
    for real_offset in range(-crop_size, crop_size + 1, 10):
        # –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        tick_x = zoomed_x + (real_offset * zoom_factor)
        if tick_x < 0 or tick_x > zoomed_w:
            continue
            
        tick_y = ruler_h_y
        
        # –ö–∞–∂–¥—ã–µ 50px - –¥–ª–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
        if real_offset % 50 == 0:
            draw.line([(tick_x, tick_y - 20), (tick_x, tick_y + 20)], fill='yellow', width=4)
            label = f"{real_offset:+d}" if real_offset != 0 else "0"
            # –ö–†–£–ü–ù–´–ô —à—Ä–∏—Ñ—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–¥/–ø–æ–¥ –ª–∏–Ω–µ–π–∫–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è
            text_y = tick_y + 30 if tick_y < zoomed_h / 2 else tick_y - 45
            draw.text((tick_x - 25, text_y), label, fill='yellow', font=None)
        else:
            # –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ—Ç–∫–∞ (–∫–∞–∂–¥—ã–µ 10px)
            draw.line([(tick_x, tick_y - 10), (tick_x, tick_y + 10)], fill='yellow', width=3)
    
    # –í–ï–†–¢–ò–ö–ê–õ–¨–ù–ê–Ø –ª–∏–Ω–µ–π–∫–∞ (–†–Ø–î–û–ú —Å —Ç–æ—á–∫–æ–π)
    ruler_v_offset = 50  # –û—Ç—Å—Ç—É–ø –æ—Ç —Ç–æ—á–∫–∏
    ruler_v_x = zoomed_x + ruler_v_offset
    
    # –õ–∏–Ω–∏—è –ª–∏–Ω–µ–π–∫–∏ (—á–µ—Ä–µ–∑ –≤—Å—é –≤—ã—Å–æ—Ç—É)
    draw.line([(ruler_v_x, 0), (ruler_v_x, zoomed_h)], 
              fill='cyan', width=4)
    
    # –ú–µ—Ç–∫–∏: -250 –¥–æ +250 (–∫–∞–∂–¥—ã–µ 10px —Ä–µ–∞–ª—å–Ω—ã—Ö)
    for real_offset in range(-crop_size, crop_size + 1, 10):
        # –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        tick_y = zoomed_y + (real_offset * zoom_factor)
        if tick_y < 0 or tick_y > zoomed_h:
            continue
            
        tick_x = ruler_v_x
        
        # –ö–∞–∂–¥—ã–µ 50px - –¥–ª–∏–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å –ø–æ–¥–ø–∏—Å—å—é
        if real_offset % 50 == 0:
            draw.line([(tick_x - 20, tick_y), (tick_x + 20, tick_y)], fill='cyan', width=4)
            label = f"{real_offset:+d}" if real_offset != 0 else "0"
            # –ö–†–£–ü–ù–´–ô —à—Ä–∏—Ñ—Ç –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Å–ª–µ–≤–∞/—Å–ø—Ä–∞–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è
            text_x = tick_x + 30 if tick_x < zoomed_w / 2 else tick_x - 70
            draw.text((text_x, tick_y - 12), label, fill='cyan', font=None)
        else:
            # –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ—Ç–∫–∞ (–∫–∞–∂–¥—ã–µ 10px)
            draw.line([(tick_x - 10, tick_y), (tick_x + 10, tick_y)], fill='cyan', width=3)
    
    # –ò–Ω—Ñ–æ –≤ —É–≥–ª—É
    draw.text((10, 10), f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x}, {y})", fill='white')
    draw.text((10, 35), f"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ: x{zoom_factor}", fill='white')
    draw.text((10, 60), f"–õ–∏–Ω–µ–π–∫–∏: –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ", fill='white')
    draw.text((10, 85), f"–¢–æ—á–∫–∞ (0,0) = –∫—Ä–∞—Å–Ω–∞—è —Ç–æ—á–∫–∞", fill='white')
    
    return zoomed


def ask_gemini_verify(img_with_point, current_x, current_y):
    """
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç Gemini –≤–µ—Ä–Ω–∞ –ª–∏ —Ç–æ—á–∫–∞, –µ—Å–ª–∏ –Ω–µ—Ç - –∫–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    
    Returns:
        dict: {
            'correct': bool,
            'delta_x': int,  # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–≤–∏–≥–∞—Ç—å –ø–æ X (+ –≤–ø—Ä–∞–≤–æ, - –≤–ª–µ–≤–æ)
            'delta_y': int   # –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–≤–∏–≥–∞—Ç—å –ø–æ Y (+ –≤–Ω–∏–∑, - –≤–≤–µ—Ä—Ö)
        }
    """
    width, height = img_with_point.size
    
    prompt = f'''–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –§–†–ê–ì–ú–ï–ù–¢ —ç–∫—Ä–∞–Ω–∞ (500x500px —É–≤–µ–ª–∏—á–µ–Ω –≤ 3 —Ä–∞–∑–∞ –¥–æ {width}x{height}px).

–ö–†–ê–°–ù–ê–Ø –¢–û–ß–ö–ê —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ({current_x}, {current_y}).

–õ–ò–ù–ï–ô–ö–ò –†–Ø–î–û–ú –° –¢–û–ß–ö–û–ô:
- –ñ–ï–õ–¢–ê–Ø –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞ –ù–ò–ñ–ï –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–∏ (0 –Ω–∞ –ª–∏–Ω–µ–π–∫–µ)
- –ì–û–õ–£–ë–ê–Ø –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–µ–π–∫–∞ –°–ü–†–ê–í–ê –æ—Ç –∫—Ä–∞—Å–Ω–æ–π —Ç–æ—á–∫–∏ (0 –Ω–∞ –ª–∏–Ω–µ–π–∫–µ)
- –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –°–õ–ï–í–ê –∏ –í–´–®–ï —Ç–æ—á–∫–∏ (0)
- –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –°–ü–†–ê–í–ê –∏ –ù–ò–ñ–ï —Ç–æ—á–∫–∏ (0)
- –î–ª–∏–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 50 –†–ï–ê–õ–¨–ù–´–• –ø–∏–∫—Å–µ–ª–µ–π (—Å –ø–æ–¥–ø–∏—Å—è–º–∏)
- –ö–æ—Ä–æ—Ç–∫–∏–µ –º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–∞–∂–¥—ã–µ 10 –†–ï–ê–õ–¨–ù–´–• –ø–∏–∫—Å–µ–ª–µ–π

‚ö†Ô∏è –í–ê–ñ–ù–û: –õ–∏–Ω–µ–π–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –†–ï–ê–õ–¨–ù–´–ï –ø–∏–∫—Å–µ–ª–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —ç–∫—Ä–∞–Ω–µ!

–ó–ê–î–ê–ß–ê: –¢—ã –£–í–ï–†–ï–ù, —á—Ç–æ –∫–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ({current_x}, {current_y}) –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É "+–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" –∏–∑ Spotify (–±–µ–ª—ã–π –ø–ª—é—Å–∏–∫ –≤ —Å–µ—Ä–æ–º –∫—Ä—É–≥–µ)?

üéØ –¢–í–û–Ø –ó–ê–î–ê–ß–ê:
1. –ù–∞–π–¥–∏ –∫–Ω–æ–ø–∫—É "+–¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ" (–±–µ–ª—ã–π –ø–ª—é—Å –≤ —Å–µ—Ä–æ–º –∫—Ä—É–≥–µ)
2. –û—Ü–µ–Ω–∏: –ì–ê–†–ê–ù–¢–ò–†–£–ï–¢ –ª–∏ –∫–ª–∏–∫ –ø–æ –ö–†–ê–°–ù–û–ô –¢–û–ß–ö–ï –∞–∫—Ç–∏–≤–∞—Ü–∏—é –∫–Ω–æ–ø–∫–∏?
3. –ï—Å–ª–∏ –ù–ï–¢ - –∏—Å–ø–æ–ª—å–∑—É–π –õ–ò–ù–ï–ô–ö–ò –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–¥–≤–∏–≥–∞

üìç –ü–†–ê–í–ò–õ–ê –°–î–í–ò–ì–ê (–∏—Å–ø–æ–ª—å–∑—É–π –ª–∏–Ω–µ–π–∫–∏):
- –ö–Ω–æ–ø–∫–∞ –°–ü–†–ê–í–ê –æ—Ç —Ç–æ—á–∫–∏ ‚Üí –°–¥–≤–∏–≥ X: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô (+)
- –ö–Ω–æ–ø–∫–∞ –°–õ–ï–í–ê –æ—Ç —Ç–æ—á–∫–∏ ‚Üí –°–¥–≤–∏–≥ X: –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ô (-)
- –ö–Ω–æ–ø–∫–∞ –ù–ò–ñ–ï —Ç–æ—á–∫–∏ ‚Üí –°–¥–≤–∏–≥ Y: –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô (+)
- –ö–Ω–æ–ø–∫–∞ –í–´–®–ï —Ç–æ—á–∫–∏ ‚Üí –°–¥–≤–∏–≥ Y: –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–´–ô (-)

–ü—Ä–∏–º–µ—Ä: —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –∫–Ω–æ–ø–∫—É, –Ω—É–∂–Ω–æ —Å–¥–≤–∏–Ω—É—Ç—å —Ç–æ—á–∫—É –Ω–∞ 15px –í–ü–†–ê–í–û –∏ 5px –í–í–ï–†–• ‚Üí –°–¥–≤–∏–≥ X: +15, –°–¥–≤–∏–≥ Y: -5

‚ö†Ô∏è –í–ê–ñ–ù–û:
- –õ–∏–Ω–µ–π–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω—ã —Ç–æ—á–Ω–æ - "+20" = —Ä–æ–≤–Ω–æ 20 –ø–∏–∫—Å–µ–ª–µ–π
- –ö–ª–∏–∫ –¥–æ–ª–∂–µ–Ω –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
- –ò—Å–ø–æ–ª—å–∑—É–π –ª–∏–Ω–µ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è

–û–¢–í–ï–¢–¨ –°–¢–†–û–ì–û –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:

1) –ï—Å–ª–∏ —Ç—ã –£–í–ï–†–ï–ù, —á—Ç–æ –∫–ª–∏–∫ –ø–æ —Ç–æ—á–∫–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É:
–¢–æ—á–∫–∞: –í–ï–†–ù–ê

2) –ï—Å–ª–∏ –ù–ï –£–í–ï–†–ï–ù –∏–ª–∏ —Ç–æ—á–∫–∞ —è–≤–Ω–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è, —É–∫–∞–∂–∏ –ö–û–†–†–ï–ö–¶–ò–Æ:
–¢–æ—á–∫–∞: –ù–ï –í–ï–†–ù–ê
–°–¥–≤–∏–≥ X: [—á–∏—Å–ª–æ]  (–ø–æ –∂–µ–ª—Ç–æ–π –ª–∏–Ω–µ–π–∫–µ)
–°–¥–≤–∏–≥ Y: [—á–∏—Å–ª–æ]  (–ø–æ –≥–æ–ª—É–±–æ–π –ª–∏–Ω–µ–π–∫–µ)
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –ø–æ –ª–∏–Ω–µ–π–∫–∞–º

–ü—Ä–∏–º–µ—Ä—ã:
–¢–æ—á–∫–∞: –í–ï–†–ù–ê

–∏–ª–∏

–¢–æ—á–∫–∞: –ù–ï –í–ï–†–ù–ê
–°–¥–≤–∏–≥ X: 18
–°–¥–≤–∏–≥ Y: -7
–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: –∫–Ω–æ–ø–∫–∞ –Ω–∞ "+18" (–∂–µ–ª—Ç–∞—è) –∏ "-7" (–≥–æ–ª—É–±–∞—è)'''

    log('üìù –ü–†–û–ú–ü–¢ (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–∫–∏):')
    log('=' * 80)
    log(prompt)
    log('=' * 80)
    log('')

    model = genai.GenerativeModel('gemini-2.5-pro')  # –ù–ï 2.0!
    response = model.generate_content([prompt, img_with_point])
    
    answer = response.text.strip()
    log(f"üì• –û—Ç–≤–µ—Ç Gemini:\n{answer}\n")
    
    result = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ "–í–ï–†–ù–ê"
    if '–í–ï–†–ù–ê' in answer and '–ù–ï –í–ï–†–ù–ê' not in answer:
        result['correct'] = True
        result['delta_x'] = 0
        result['delta_y'] = 0
        return result
    
    result['correct'] = False
    
    # –ü–∞—Ä—Å–∏–º —Å–¥–≤–∏–≥–∏
    x_match = re.search(r'–°–¥–≤–∏–≥ X:\s*([+-]?\d+)', answer)
    y_match = re.search(r'–°–¥–≤–∏–≥ Y:\s*([+-]?\d+)', answer)
    
    if x_match and y_match:
        result['delta_x'] = int(x_match.group(1))
        result['delta_y'] = int(y_match.group(1))
    else:
        log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–¥–≤–∏–≥–∏')
        return None
    
    return result


def iterative_refinement(screenshot_path, max_iterations=10):
    """
    –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω–µ–µ–∫
    
    Returns:
        (x, y) –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–ª–∏ None
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞
    log_path = init_log()
    
    log('üéØ –ü–û–ò–°–ö –ö–û–û–†–î–ò–ù–ê–¢ –° –õ–ò–ù–ï–ô–ö–ê–ú–ò')
    log('=' * 80)
    log(f'–ú–æ–¥–µ–ª—å: gemini-2.5-pro (–ù–ï 2.0!)')
    log(f'–ú–∞–∫—Å –∏—Ç–µ—Ä–∞—Ü–∏–π: {max_iterations}')
    log(f'üìù –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤: {log_path}')
    log('')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    original = Image.open(screenshot_path).convert('RGB')
    width, height = original.size
    log(f'üìê –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: {width}x{height}')
    log('')
    
    # –®–ê–ì 1: –°–ø—Ä–æ—Å–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    log('=' * 80)
    log('–®–ê–ì 1: –ó–ê–ü–†–û–° –ù–ê–ß–ê–õ–¨–ù–´–• –ö–û–û–†–î–ò–ù–ê–¢')
    log('=' * 80)
    coords = ask_gemini_coordinates(original)
    
    if not coords:
        close_log()
        return None
    
    current_x, current_y = coords
    log(f'‚úÖ –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({current_x}, {current_y})')
    log('')
    
    # –®–ê–ì 2: –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ —É—Ç–æ—á–Ω–µ–Ω–∏–µ
    iteration = 1
    
    while iteration <= max_iterations:
        log('=' * 80)
        log(f'–®–ê–ì {iteration + 1}: –ü–†–û–í–ï–†–ö–ê –ò –ö–û–†–†–ï–ö–¶–ò–Ø')
        log('=' * 80)
        log(f'–¢–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({current_x}, {current_y})')
        
        # –†–∏—Å—É–µ–º —Ç–æ—á–∫—É + –ª–∏–Ω–µ–π–∫–∏
        img_with_point = draw_point_with_rulers(original, current_x, current_y)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        iter_path = f'screenshots/ruler_iter{iteration}.png'
        img_with_point.save(iter_path)
        log(f'‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {iter_path}')
        subprocess.run(['open', iter_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º Gemini
        result = ask_gemini_verify(img_with_point, current_x, current_y)
        
        if not result:
            log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞')
            close_log()
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result['correct']:
            log('')
            log('=' * 80)
            log('üéâ –¢–û–ß–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!')
            log('=' * 80)
            close_log()
            return (current_x, current_y)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        delta_x = result['delta_x']
        delta_y = result['delta_y']
        
        log(f'üìç –ö–æ—Ä—Ä–µ–∫—Ü–∏—è: X{delta_x:+d}, Y{delta_y:+d}')
        
        current_x += delta_x
        current_y += delta_y
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º —ç–∫—Ä–∞–Ω–∞
        current_x = max(0, min(width, current_x))
        current_y = max(0, min(height, current_y))
        
        log(f'‚û°Ô∏è  –ù–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({current_x}, {current_y})')
        log('')
        
        iteration += 1
    
    # –ú–∞–∫—Å –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
    log('=' * 80)
    log('‚ö†Ô∏è  –î–û–°–¢–ò–ì–ù–£–¢–û –ú–ê–ö–°–ò–ú–£–ú –ò–¢–ï–†–ê–¶–ò–ô')
    log('=' * 80)
    close_log()
    return (current_x, current_y)


if __name__ == '__main__':
    # –¢–µ—Å—Ç
    screenshot = 'screenshots/screenshot_1759682765.png'
    
    result = iterative_refinement(screenshot, max_iterations=10)
    
    if result:
        x, y = result
        print()
        print('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´:')
        print(f'   X = {x}')
        print(f'   Y = {y}')
        print()
        print('‚úÖ –ì–æ—Ç–æ–≤–æ!')
        print(f'üìù –ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ logs/ruler_finder_*.log')
    else:
        print()
        print('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã')
