"""
–¢–µ—Å—Ç: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ Windsurf –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
1. MCP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (navigate, click, type, execute_js)
2. Fallback MCP ‚Üí VISUAL_CLICK
3. –†–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–∫–Ω–∞–º–∏/–≤–∫–ª–∞–¥–∫–∞–º–∏
4. –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
5. –°–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

–ó–∞–¥–∞—á–∞:
- –û—Ç–∫—Ä—ã—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—á—Ç—É (10minutemail.com)
- –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å email –∞–¥—Ä–µ—Å
- –û—Ç–∫—Ä—ã—Ç—å Windsurf —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
- –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É
- –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
"""

import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from iterative_planner import IterativePlanner
from screen_manager import ScreenManager
from browser_controller import BrowserController
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/test_windsurf_registration.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)


async def test_windsurf_registration():
    """
    –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Windsurf
    """
    logger.info("=" * 80)
    logger.info("–¢–ï–°–¢: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø WINDSURF –ù–ê –í–†–ï–ú–ï–ù–ù–£–Æ –ü–û–ß–¢–£")
    logger.info("=" * 80)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    screen = ScreenManager(wait_for_user_idle=config.WAIT_FOR_USER_IDLE)
    browser = BrowserController(browser='Chrome', screen=screen)
    planner = IterativePlanner(api_key=config.GEMINI_API_KEY, screen_manager=screen)
    planner.is_browser_task = True  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º MCP —Ä–µ–∂–∏–º
    
    try:
        # –®–∞–≥ 1: –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        logger.info("\n" + "=" * 60)
        logger.info("–®–ê–ì 1: –û—Ç–∫—Ä—ã—Ç–∏–µ Chrome –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ")
        logger.info("=" * 60)
        
        await browser.open_on_secondary_monitor()
        await asyncio.sleep(3)
        
        logger.info("‚úÖ Chrome –æ—Ç–∫—Ä—ã—Ç")
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
        logger.info("\n" + "=" * 60)
        logger.info("–®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ email")
        logger.info("=" * 60)
        
        task_1 = """
        –û—Ç–∫—Ä–æ–π —Å–∞–π—Ç 10minutemail.com –∏ –ø–æ–ª—É—á–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π email –∞–¥—Ä–µ—Å.
        –ó–∞–¥–∞—á–∞:
        1. –û—Ç–∫—Ä—ã—Ç—å 10minutemail.com
        2. –ü–æ–¥–æ–∂–¥–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        3. –ù–∞–π—Ç–∏ –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å email –∞–¥—Ä–µ—Å
        """
        
        plan_1 = await planner.create_initial_plan(task_1)
        logger.info(f"üìã –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {len(plan_1['steps'])} —à–∞–≥–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω 1
        monitor_info = screen.get_secondary_monitor_info()
        steps_done = []
        
        for i, step in enumerate(plan_1['steps'], 1):
            logger.info(f"\n‚ñ∂Ô∏è  –®–∞–≥ {i}/{len(plan_1['steps'])}: {step['action']}")
            result = await planner.execute_step(step, monitor_info)
            
            if result['success']:
                logger.info(f"‚úÖ {result['result']}")
            else:
                logger.warning(f"‚ö†Ô∏è {result['result']}")
            
            steps_done.append(f"{step['action']} {step.get('params', {})}")
            
            if result.get('needs_replan'):
                logger.info("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è replan...")
                break
            
            await asyncio.sleep(1)
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        logger.info("\n‚è∏Ô∏è  –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email...")
        await asyncio.sleep(5)
        
        # –®–∞–≥ 3: Windsurf —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        logger.info("\n" + "=" * 60)
        logger.info("–®–ê–ì 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ Windsurf")
        logger.info("=" * 60)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º email —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 10minutemail
        logger.info("\nüìù –ü–æ–ª—É—á–µ–Ω–∏–µ email –∞–¥—Ä–µ—Å–∞...")
        js_code = "document.querySelector('#mail_address')?.value || 'email –Ω–µ –Ω–∞–π–¥–µ–Ω'"
        step_js = {
            'action': 'MCP_EXECUTE_JS',
            'params': {'code': js_code}
        }
        result_js = await planner.execute_step(step_js, monitor_info)
        logger.info(f"üìß Email: {result_js['result']}")
        
        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Windsurf
        task_2 = """
        –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ Windsurf.
        
        –ó–∞–¥–∞—á–∞:
        1. –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç codeium.com/windsurf –∏–ª–∏ –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        2. –ù–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (Sign Up, Get Started, Register –∏ —Ç.–¥.)
        3. –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:
           - Email: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å —Å 10minutemail (–ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ JavaScript —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã 10minutemail)
           - –ü–∞—Ä–æ–ª—å: TestPassword123! (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
           - –ò–º—è: Test User (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        
        –í–ê–ñ–ù–û: 
        - –ù–ï hardcode –Ω–∏–∫–∞–∫–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –°–ê–ú–ê –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã
        - –ò—Å–ø–æ–ª—å–∑—É–π MCP –¥–µ–π—Å—Ç–≤–∏—è –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        - –ï—Å–ª–∏ MCP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç fallback –Ω–∞ VISUAL_CLICK
        """
        
        plan_2 = await planner.create_initial_plan(task_2)
        logger.info(f"üìã –ü–ª–∞–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {len(plan_2['steps'])} —à–∞–≥–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω 2
        for i, step in enumerate(plan_2['steps'], 1):
            logger.info(f"\n‚ñ∂Ô∏è  –®–∞–≥ {i}/{len(plan_2['steps'])}: {step['action']}")
            result = await planner.execute_step(step, monitor_info)
            
            if result['success']:
                logger.info(f"‚úÖ {result['result']}")
            else:
                logger.warning(f"‚ö†Ô∏è {result['result']}")
            
            if result.get('needs_replan'):
                logger.info("üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–ª–∞–Ω...")
                # –ú–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å replan –ª–æ–≥–∏–∫—É
                break
            
            await asyncio.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        logger.info("\n" + "=" * 60)
        logger.info("–ò–¢–û–ì–ò –¢–ï–°–¢–ê")
        logger.info("=" * 60)
        
        logger.info("""
        ‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ:
        - –û—Ç–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
        - MCP_NAVIGATE –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è URL
        - MCP_EXECUTE_JS –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        - –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        - –û–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        ‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω—É–∂–Ω–æ:
        - –†–µ–∞–ª—å–Ω—ã–π URL —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Windsurf
        - MCP_CLICK –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ñ–æ—Ä–º—ã
        - MCP_TYPE –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        - Fallback –Ω–∞ VISUAL_CLICK
        - –†–∞–±–æ—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º email
        """)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}", exc_info=True)
        return False
        
    finally:
        # Cleanup
        logger.info("\nüßπ Cleanup...")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        from chrome_mcp_integration import close_chrome_mcp_integration
        await close_chrome_mcp_integration()
        
        logger.info("‚úÖ Cleanup –∑–∞–≤–µ—Ä—à–µ–Ω")


async def test_mcp_basic_actions():
    """
    –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ MCP –¥–µ–π—Å—Ç–≤–∏–π –±–µ–∑ –ø–æ–ª–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    logger.info("\n" + "=" * 80)
    logger.info("–¢–ï–°–¢: –ë–ê–ó–û–í–´–ï MCP –î–ï–ô–°–¢–í–ò–Ø")
    logger.info("=" * 80)
    
    screen = ScreenManager(wait_for_user_idle=False)  # –ë–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞
    browser = BrowserController(browser='Chrome', screen=screen)
    planner = IterativePlanner(api_key=config.GEMINI_API_KEY, screen_manager=screen)
    planner.is_browser_task = True
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        await browser.open_on_secondary_monitor()
        await asyncio.sleep(2)
        
        monitor_info = screen.get_secondary_monitor_info()
        
        # –¢–µ—Å—Ç 1: MCP_NAVIGATE
        logger.info("\nüìù –¢–µ—Å—Ç 1: MCP_NAVIGATE")
        step1 = {
            'action': 'MCP_NAVIGATE',
            'params': {'url': 'https://example.com'}
        }
        result1 = await planner.execute_step(step1, monitor_info)
        logger.info(f"{'‚úÖ' if result1['success'] else '‚ùå'} MCP_NAVIGATE: {result1['result']}")
        await asyncio.sleep(2)
        
        # –¢–µ—Å—Ç 2: MCP_EXECUTE_JS
        logger.info("\nüìù –¢–µ—Å—Ç 2: MCP_EXECUTE_JS")
        step2 = {
            'action': 'MCP_EXECUTE_JS',
            'params': {'code': 'document.title'}
        }
        result2 = await planner.execute_step(step2, monitor_info)
        logger.info(f"{'‚úÖ' if result2['success'] else '‚ùå'} MCP_EXECUTE_JS: {result2['result']}")
        await asyncio.sleep(1)
        
        # –¢–µ—Å—Ç 3: MCP_CLICK (–±—É–¥–µ—Ç fallback –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ–≤–µ—Ä–Ω—ã–π)
        logger.info("\nüìù –¢–µ—Å—Ç 3: MCP_CLICK (fallback —Ç–µ—Å—Ç)")
        step3 = {
            'action': 'MCP_CLICK',
            'params': {'selector': 'a'}  # –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞
        }
        result3 = await planner.execute_step(step3, monitor_info)
        logger.info(f"{'‚úÖ' if result3['success'] else '‚ö†Ô∏è'} MCP_CLICK: {result3['result']}")
        
        # –ò—Ç–æ–≥–∏
        logger.info("\n" + "=" * 60)
        logger.info("–ò–¢–û–ì–ò –ë–ê–ó–û–í–´–• –¢–ï–°–¢–û–í")
        logger.info("=" * 60)
        
        tests_passed = sum([
            result1['success'],
            result2['success'],
            result3['success'] or result3.get('needs_replan')  # Fallback —Ç–æ–∂–µ OK
        ])
        
        logger.info(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {tests_passed}/3")
        
        return tests_passed >= 2  # –ú–∏–Ω–∏–º—É–º 2 –∏–∑ 3
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
        return False
        
    finally:
        from chrome_mcp_integration import close_chrome_mcp_integration
        await close_chrome_mcp_integration()


async def main():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    logger.info("\n" + "üß™" * 40)
    logger.info("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í WINDSURF –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò")
    logger.info("üß™" * 40 + "\n")
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ MCP –¥–µ–π—Å—Ç–≤–∏—è
    logger.info("\n" + "=" * 80)
    logger.info("–¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–µ MCP –¥–µ–π—Å—Ç–≤–∏—è")
    logger.info("=" * 80)
    
    test1_result = await test_mcp_basic_actions()
    await asyncio.sleep(2)
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π (demo)
    logger.info("\n" + "=" * 80)
    logger.info("–¢–ï–°–¢ 2: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    logger.info("=" * 80)
    
    test2_result = await test_windsurf_registration()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("–§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò")
    logger.info("=" * 80)
    
    logger.info(f"\n{'‚úÖ' if test1_result else '‚ùå'} –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–µ MCP –¥–µ–π—Å—Ç–≤–∏—è")
    logger.info(f"{'‚úÖ' if test2_result else '‚ùå'} –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π")
    
    all_passed = test1_result and test2_result
    
    if all_passed:
        logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return 0
    else:
        logger.error("\n‚ùå –ï–°–¢–¨ –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
