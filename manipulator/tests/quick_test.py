# –†–ï–ì–£–õ–Ø–†–ù–´–ô –¢–ï–°–¢: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
"""
import asyncio
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from command_interpreter import CommandInterpreter
from screen_manager import ScreenManager
from browser_controller import BrowserController

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def test_gemini():
    """–¢–µ—Å—Ç Gemini –ø–æ–Ω–∏–º–∞–Ω–∏—è"""
    print("\n=== –¢–ï–°–¢ 1: Gemini –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ===")
    interpreter = CommandInterpreter()
    
    command = "–û—Ç–∫—Ä–æ–π YouTube –∏ –Ω–∞–π–¥–∏ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–æ—Ç–∏–∫–æ–≤"
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    plan = await interpreter.understand_command(command)
    print(f"–ü–ª–∞–Ω: {plan}")
    print("‚úÖ Gemini —Ä–∞–±–æ—Ç–∞–µ—Ç\n")


async def test_screen():
    """–¢–µ—Å—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤"""
    print("\n=== –¢–ï–°–¢ 2: –°–∫—Ä–∏–Ω—à–æ—Ç—ã ===")
    screen = ScreenManager()
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤: {len(screen.displays)}")
    for i, display in enumerate(screen.displays):
        print(f"  –ú–æ–Ω–∏—Ç–æ—Ä {i}: {display['width']}x{display['height']}")
    
    screenshot = screen.capture_secondary_monitor()
    print(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {screenshot}")
    print("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç\n")
    
    return screenshot


async def test_browser():
    """–¢–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("\n=== –¢–ï–°–¢ 3: –ë—Ä–∞—É–∑–µ—Ä ===")
    browser = BrowserController()
    
    await browser.open_on_secondary_monitor()
    print("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ\n")
    
    await asyncio.sleep(3)


async def main():
    print("\n" + "="*50)
    print("üß™ –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("="*50)
    
    # –¢–µ—Å—Ç 1: Gemini
    try:
        await test_gemini()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}\n")
    
    # –¢–µ—Å—Ç 2: –°–∫—Ä–∏–Ω—à–æ—Ç—ã
    try:
        screenshot = await test_screen()
        print(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {screenshot}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {e}\n")
    
    # –¢–µ—Å—Ç 3: –ë—Ä–∞—É–∑–µ—Ä
    try:
        await test_browser()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}\n")
    
    print("\n" + "="*50)
    print("‚ú® –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*50 + "\n")


if __name__ == '__main__':
    asyncio.run(main())
