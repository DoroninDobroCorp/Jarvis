"""
Chrome MCP Integration
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —á–µ—Ä–µ–∑ Chrome DevTools MCP
"""

import asyncio
import logging
from typing import Optional, Dict, Any
from chrome_mcp_client import ChromeMCPClient, get_chrome_mcp_client, close_chrome_mcp_client

logger = logging.getLogger(__name__)


class ChromeMCPIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Chrome DevTools MCP –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
    - Fallback –Ω–∞ VISUAL_CLICK –ø—Ä–∏ —Å–±–æ—è—Ö
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–µ—É–¥–∞—á –¥–ª—è —É–º–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    """
    
    def __init__(self):
        self.client: Optional[ChromeMCPClient] = None
        self.connected = False
        self.failed_actions = []  # –ò—Å—Ç–æ—Ä–∏—è –Ω–µ—É–¥–∞—á –¥–ª—è fallback —Ä–µ—à–µ–Ω–∏–π
        self.max_retries = 2
        
    async def ensure_connected(self) -> bool:
        """
        –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP –∞–∫—Ç–∏–≤–Ω–æ
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, False –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å
        """
        if self.connected and self.client:
            return True
        
        try:
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Chrome DevTools MCP...")
            self.client = await get_chrome_mcp_client()
            self.connected = True
            logger.info("‚úÖ Chrome MCP –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chrome MCP: {e}")
            self.connected = False
            return False
    
    async def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MCP"""
        if self.client:
            await close_chrome_mcp_client()
            self.connected = False
            self.client = None
            logger.info("üîå Chrome MCP –æ—Ç–∫–ª—é—á–µ–Ω")
    
    async def execute_action(self, action: str, params: Dict[str, Any]) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω–∏—Ç—å MCP –¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
        
        Args:
            action: MCP_NAVIGATE, MCP_CLICK, MCP_EXECUTE_JS, MCP_TYPE, etc.
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–π—Å—Ç–≤–∏—è
            
        Returns:
            {
                'success': bool,
                'result': str,
                'needs_fallback': bool,  # True –µ—Å–ª–∏ –Ω—É–∂–µ–Ω fallback –Ω–∞ VISUAL_CLICK
                'data': Any  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            }
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        if not await self.ensure_connected():
            return {
                'success': False,
                'result': '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Chrome MCP',
                'needs_fallback': True,
                'data': None
            }
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ
        for attempt in range(self.max_retries):
            try:
                if action == 'MCP_NAVIGATE':
                    return await self._navigate(params)
                
                elif action == 'MCP_CLICK':
                    return await self._click(params)
                
                elif action == 'MCP_EXECUTE_JS':
                    return await self._execute_js(params)
                
                elif action == 'MCP_TYPE':
                    return await self._type(params)
                
                elif action == 'MCP_GET_CONTENT':
                    return await self._get_content(params)
                
                elif action == 'MCP_SCREENSHOT':
                    return await self._screenshot(params)
                
                else:
                    return {
                        'success': False,
                        'result': f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ MCP –¥–µ–π—Å—Ç–≤–∏–µ: {action}',
                        'needs_fallback': False,
                        'data': None
                    }
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(0.5)
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
                    self._record_failure(action, params, str(e))
                    return {
                        'success': False,
                        'result': f'MCP –¥–µ–π—Å—Ç–≤–∏–µ failed –ø–æ—Å–ª–µ {self.max_retries} –ø–æ–ø—ã—Ç–æ–∫: {e}',
                        'needs_fallback': True,
                        'data': None
                    }
    
    async def _navigate(self, params: Dict) -> Dict:
        """–û—Ç–∫—Ä—ã—Ç—å URL –≤ Chrome"""
        url = params.get('url', '')
        
        if not url:
            return {
                'success': False,
                'result': 'URL –Ω–µ —É–∫–∞–∑–∞–Ω',
                'needs_fallback': False,
                'data': None
            }
        
        logger.info(f"üåê MCP_NAVIGATE: {url}")
        result = await self.client.navigate_to_url(url)
        
        return {
            'success': True,
            'result': f'–û—Ç–∫—Ä—ã–ª URL: {url}',
            'needs_fallback': False,
            'data': result
        }
    
    async def _click(self, params: Dict) -> Dict:
        """
        –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É
        
        MCP click —Ç—Ä–µ–±—É–µ—Ç uid –∏–∑ snapshot, –∞ –Ω–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä!
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        1. –ï—Å–ª–∏ –µ—Å—Ç—å uid - –∫–ª–∏–∫–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
        2. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä - –¥–µ–ª–∞–µ–º snapshot, –∏—â–µ–º uid, –∫–ª–∏–∫–∞–µ–º
        3. –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ - fallback –Ω–∞ VISUAL_CLICK
        """
        selector = params.get('selector', '')
        uid = params.get('uid', '')
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å uid - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        if uid:
            logger.info(f"üñ±Ô∏è  MCP_CLICK –ø–æ uid: {uid}")
            result = await self.client.call_tool("click", {"uid": uid})
            return {
                'success': True,
                'result': f'–ö–ª–∏–∫–Ω—É–ª –ø–æ uid {uid}',
                'needs_fallback': False,
                'data': result
            }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä - –Ω—É–∂–µ–Ω snapshot –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è uid
        if selector:
            logger.info(f"üñ±Ô∏è  MCP_CLICK: –∏—â—É uid –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}")
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–µ–ª–∞–µ–º snapshot
            snapshot = await self.client.get_page_content()
            
            # –ü–∞—Ä—Å–∏–º snapshot —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ uid —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
            # Snapshot –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å uid —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            snapshot_text = str(snapshot)
            
            # –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏: –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –ø—Ä–æ—Å—Ç–æ–π (—Ç–µ–≥, –∫–ª–∞—Å—Å, id)
            # –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ snapshot
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –∫–ª–∏–∫–∞
            logger.warning(f"‚ö†Ô∏è MCP click —Ç—Ä–µ–±—É–µ—Ç uid, –Ω–æ –ø–æ–ª—É—á–µ–Ω selector. –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript fallback")
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –∫–ª–∏–∫ —á–µ—Ä–µ–∑ JavaScript
            js_code = f"document.querySelector('{selector}')?.click()"
            js_result = await self.client.execute_javascript(js_code)
            
            return {
                'success': True,
                'result': f'–ö–ª–∏–∫–Ω—É–ª –ø–æ {selector} —á–µ—Ä–µ–∑ JavaScript',
                'needs_fallback': False,
                'data': js_result
            }
        
        # –ù–µ—Ç –Ω–∏ uid, –Ω–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ - –Ω—É–∂–µ–Ω fallback
        return {
            'success': False,
            'result': '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ uid, –Ω–∏ selector –¥–ª—è MCP_CLICK',
            'needs_fallback': True,
            'data': None
        }
    
    async def _execute_js(self, params: Dict) -> Dict:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å JavaScript –∫–æ–¥"""
        code = params.get('code', '')
        
        if not code:
            return {
                'success': False,
                'result': 'JavaScript –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω',
                'needs_fallback': False,
                'data': None
            }
        
        logger.info(f"‚ö° MCP_EXECUTE_JS: {code[:50]}...")
        result = await self.client.execute_javascript(code)
        
        return {
            'success': True,
            'result': f'–í—ã–ø–æ–ª–Ω–∏–ª JS: {code[:30]}...',
            'needs_fallback': False,
            'data': result
        }
    
    async def _type(self, params: Dict) -> Dict:
        """
        –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ JavaScript (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
        """
        text = params.get('text', '')
        selector = params.get('selector', '')
        uid = params.get('uid', '')
        
        if not text:
            return {
                'success': False,
                'result': '–¢–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω',
                'needs_fallback': False,
                'data': None
            }
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å selector –∏–ª–∏ uid - –∏—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏
        if selector or uid:
            logger.info(f"‚å®Ô∏è  MCP_TYPE: {text[:30]}... –≤ {selector or uid}")
            result = await self.client.fill_input(selector or uid, text, is_uid=bool(uid))
            
            return {
                'success': True,
                'result': f'–í–≤–µ–ª —Ç–µ–∫—Å—Ç: {text[:30]}...',
                'needs_fallback': False,
                'data': result
            }
        
        # –ù–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ - fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π TYPE
        return {
            'success': False,
            'result': '–°–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è MCP_TYPE',
            'needs_fallback': True,
            'data': None
        }
    
    async def _get_content(self, params: Dict) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üìÑ MCP_GET_CONTENT")
        result = await self.client.get_page_content()
        
        return {
            'success': True,
            'result': '–ü–æ–ª—É—á–∏–ª —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
            'needs_fallback': False,
            'data': result
        }
    
    async def _screenshot(self, params: Dict) -> Dict:
        """–°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        logger.info("üì∏ MCP_SCREENSHOT")
        result = await self.client.screenshot()
        
        return {
            'success': True,
            'result': '–°–¥–µ–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç',
            'needs_fallback': False,
            'data': result
        }
    
    def _record_failure(self, action: str, params: Dict, reason: str):
        """–ó–∞–ø–∏—Å–∞—Ç—å –Ω–µ—É–¥–∞—á—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        self.failed_actions.append({
            'action': action,
            'params': params,
            'reason': reason
        })
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–µ—É–¥–∞—á
        if len(self.failed_actions) > 10:
            self.failed_actions = self.failed_actions[-10:]
        
        logger.warning(f"üìù –ó–∞–ø–∏—Å–∞–ª –Ω–µ—É–¥–∞—á—É: {action} - {reason}")
    
    def should_use_fallback(self, action: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback –Ω–∞ VISUAL_CLICK
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ MCP failed
        """
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ failed - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        recent_failures = [f for f in self.failed_actions[-5:] if f['action'] == action]
        
        if len(recent_failures) >= 2:
            logger.info(f"üí° –ú–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á {action}, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é fallback –Ω–∞ VISUAL_CLICK")
            return True
        
        return False
    
    def get_failure_summary(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –Ω–µ—É–¥–∞—á –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        if not self.failed_actions:
            return "–ù–µ—Ç –Ω–µ—É–¥–∞—á"
        
        summary = []
        for f in self.failed_actions[-5:]:
            summary.append(f"‚ùå {f['action']} - {f['reason'][:50]}")
        
        return "\n".join(summary)


# Singleton instance
_chrome_mcp_integration: Optional[ChromeMCPIntegration] = None


async def get_chrome_mcp_integration() -> ChromeMCPIntegration:
    """
    –ü–æ–ª—É—á–∏—Ç—å singleton instance Chrome MCP Integration
    """
    global _chrome_mcp_integration
    
    if _chrome_mcp_integration is None:
        _chrome_mcp_integration = ChromeMCPIntegration()
    
    return _chrome_mcp_integration


async def close_chrome_mcp_integration():
    """–ó–∞–∫—Ä—ã—Ç—å Chrome MCP Integration"""
    global _chrome_mcp_integration
    
    if _chrome_mcp_integration:
        await _chrome_mcp_integration.disconnect()
        _chrome_mcp_integration = None
