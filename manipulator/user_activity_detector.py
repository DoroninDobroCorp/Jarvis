"""
–î–µ—Ç–µ–∫—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""
import time
import logging
from Quartz import CGEventSourceCreate, kCGEventSourceStateHIDSystemState, CGEventSourceCounterForEventType
from Quartz import kCGEventMouseMoved, kCGEventLeftMouseDown, kCGEventRightMouseDown
import subprocess
import os

logger = logging.getLogger(__name__)


class UserActivityDetector:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏, –∫–ª–∏–∫–∏, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
    """
    
    def __init__(self):
        self.last_mouse_position = None
        self.last_check_time = time.time()
        self.event_source = CGEventSourceCreate(kCGEventSourceStateHIDSystemState)
        
    def get_mouse_events_count(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            moves = CGEventSourceCounterForEventType(self.event_source, kCGEventMouseMoved)
            left_clicks = CGEventSourceCounterForEventType(self.event_source, kCGEventLeftMouseDown)
            right_clicks = CGEventSourceCounterForEventType(self.event_source, kCGEventRightMouseDown)
            return moves + left_clicks + right_clicks
        except:
            return 0
    
    def is_user_active(self, check_duration: float = 0.1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–≤–∏–≥–∞–µ—Ç –º—ã—à–∫–æ–π)
        
        Args:
            check_duration: –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤–∏–≥–∞–µ—Ç –º—ã—à–∫–æ–π, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        start_count = self.get_mouse_events_count()
        time.sleep(check_duration)
        end_count = self.get_mouse_events_count()
        
        return end_count > start_count
    
    def wait_for_idle(self, idle_seconds: float = 2.0, show_notification: bool = True) -> bool:
        """
        –ñ–¥—ë—Ç, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç –¥–≤–∏–≥–∞—Ç—å –º—ã—à–∫–æ–π
        
        Args:
            idle_seconds: –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω—É–∂–Ω–æ
            show_notification: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
        Returns:
            True –µ—Å–ª–∏ –¥–æ–∂–¥–∞–ª–∏—Å—å, False –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç (–º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥)
        """
        max_wait_time = 30.0
        start_wait = time.time()
        notification_shown = False
        
        logger.info(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç—ë–∫ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            elapsed = time.time() - start_wait
            if elapsed > max_wait_time:
                logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è ({max_wait_time}s)")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if self.is_user_active(check_duration=0.2):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if show_notification and not notification_shown:
                    self._show_notification(
                        "Jarvis –∂–¥—ë—Ç",
                        f"–û—Å–≤–æ–±–æ–¥–∏—Ç–µ –º—ã—à–∫—É –Ω–∞ {idle_seconds} —Å–µ–∫—É–Ω–¥—ã"
                    )
                    notification_shown = True
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –∂–¥—É –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è...")
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
                start_wait = time.time()
                time.sleep(0.5)
                continue
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
            idle_duration = time.time() - start_wait
            if idle_duration >= idle_seconds:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω {idle_duration:.1f}s, –ø—Ä–æ–¥–æ–ª–∂–∞—é")
                return True
            
            time.sleep(0.2)
    
    def _show_notification(self, title: str, message: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç macOS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            safe_message = message.replace('"', '\\"').replace("'", "\\'")
            safe_title = title.replace('"', '\\"').replace("'", "\\'")
            
            apple_script = f'''
            display notification "{safe_message}" with title "{safe_title}" sound name "Glass"
            '''
            subprocess.run(['osascript', '-e', apple_script], 
                         capture_output=True, timeout=2)
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")
    
    def get_cursor_monitor_index(self, displays: list) -> int:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞ –∫–∞–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∫—É—Ä—Å–æ—Ä
        
        Args:
            displays: –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤ –∏–∑ ScreenManager
            
        Returns:
            –ò–Ω–¥–µ–∫—Å –º–æ–Ω–∏—Ç–æ—Ä–∞ (0, 1, ...)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ AppleScript
            script = 'do shell script "echo $(osascript -e \\"tell application \\\\\\"System Events\\\\\\" to get position of mouse\\")"'
            result = subprocess.run(['osascript', '-e', script], 
                                  capture_output=True, text=True, timeout=1)
            
            if result.returncode == 0:
                # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã "x, y"
                coords = result.stdout.strip().split(',')
                if len(coords) == 2:
                    x = int(coords[0].strip())
                    y = int(coords[1].strip())
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä
                    for i, display in enumerate(displays):
                        if (display['x'] <= x < display['x'] + display['width'] and
                            display['y'] <= y < display['y'] + display['height']):
                            return i
        except Exception as e:
            logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞: {e}")
        
        return 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä
    
    def is_cursor_on_secondary_monitor(self, displays: list, secondary_index: int = 1) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        
        Args:
            displays: –°–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
            secondary_index: –ò–Ω–¥–µ–∫—Å –≤—Ç–æ—Ä–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
            
        Returns:
            True –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä –Ω–∞ –≤—Ç–æ—Ä–æ–º –º–æ–Ω–∏—Ç–æ—Ä–µ
        """
        current_index = self.get_cursor_monitor_index(displays)
        return current_index == secondary_index
