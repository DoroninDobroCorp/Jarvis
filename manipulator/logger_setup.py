"""
–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –Ω–∞ 7 –¥–Ω–µ–π
–°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥ –ø–æ–¥ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
–¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (—Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è)
"""
import logging
import os
from datetime import datetime, timedelta
from pathlib import Path
import hashlib

LOGS_DIR = 'logs'
LOG_RETENTION_DAYS = 7
SCREENSHOTS_RETENTION_DAYS = 1
SCREENSHOTS_DIRS = ['screenshots', 'test_screenshots']

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(LOGS_DIR, exist_ok=True)


def cleanup_old_logs():
    """–£–¥–∞–ª—è–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"""
    cutoff_date = datetime.now() - timedelta(days=LOG_RETENTION_DAYS)
    deleted_count = 0
    
    for log_file in Path(LOGS_DIR).glob('*.log'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º jarvis.log (–≥–ª–∞–≤–Ω—ã–π –ª–æ–≥)
        if log_file.name == 'jarvis.log':
            continue
            
        file_time = datetime.fromtimestamp(log_file.stat().st_mtime)
        if file_time < cutoff_date:
            log_file.unlink()
            deleted_count += 1
    
    if deleted_count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {deleted_count}")


def cleanup_old_screenshots():
    """–£–¥–∞–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è"""
    cutoff_date = datetime.now() - timedelta(days=SCREENSHOTS_RETENTION_DAYS)
    deleted_count = 0
    
    for screenshots_dir in SCREENSHOTS_DIRS:
        if not os.path.exists(screenshots_dir):
            continue
            
        for screenshot_file in Path(screenshots_dir).glob('*.png'):
            file_time = datetime.fromtimestamp(screenshot_file.stat().st_mtime)
            if file_time < cutoff_date:
                screenshot_file.unlink()
                deleted_count += 1
    
    if deleted_count > 0:
        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤: {deleted_count}")


def setup_command_logger(command: str) -> logging.Logger:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    
    Args:
        command: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Logger —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
    """
    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    command_hash = hashlib.md5(command.encode()).hexdigest()[:8]
    safe_name = ''.join(c if c.isalnum() or c in ' _-' else '_' for c in command[:30])
    
    log_filename = f"{timestamp}_{safe_name}_{command_hash}.log"
    log_path = os.path.join(LOGS_DIR, log_filename)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(f"command_{command_hash}")
    logger.setLevel(logging.DEBUG)
    logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ª–æ–≥–≥–µ—Ä—ã
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
    logger.handlers.clear()
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    file_handler = logging.FileHandler(log_path, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–∞
    formatter = logging.Formatter(
        '%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    file_handler.setFormatter(formatter)
    
    logger.addHandler(file_handler)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–º–∞–Ω–¥—ã
    logger.info("="*70)
    logger.info(f"–ö–û–ú–ê–ù–î–ê: {command}")
    logger.info("="*70)
    
    return logger


def setup_global_logger():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    cleanup_old_logs()
    cleanup_old_screenshots()
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥ (–≤—Å–µ –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ)
    global_log_path = os.path.join(LOGS_DIR, 'jarvis.log')
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s | %(levelname)-8s | %(name)s | %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=[
            logging.FileHandler(global_log_path, encoding='utf-8'),
            logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
        ]
    )
    
    return logging.getLogger('jarvis')
