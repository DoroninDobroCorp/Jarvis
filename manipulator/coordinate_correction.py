"""
–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Retina displays
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ª–æ–≥–∏–∫–µ –∏–∑ color_pipette.py
"""
import subprocess
from PIL import Image
import pyautogui


def get_display_scale(display_info: dict, screenshot_path: str = None) -> float:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç scale factor –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∞
    
    –ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –∏–∑ color_pipette.py:
    - screencapture –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –§–ò–ó–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    - –í—ã—á–∏—Å–ª—è–µ–º scale = physical / logical
    - –ù–∞–ø—Ä–∏–º–µ—Ä: 2880x1800 / 1440x900 = 2.0 –¥–ª—è Retina
    
    Args:
        display_info: dict —Å –∫–ª—é—á–∞–º–∏ x, y, width, height (–õ–û–ì–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        screenshot_path: –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É (–§–ò–ó–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        
    Returns:
        float: scale factor (1.0 –∏–ª–∏ 2.0)
    """
    # –ú–µ—Ç–æ–¥ 1: –¢–û–ß–ù–û–ï –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ (–∫–∞–∫ –≤ color_pipette.py)
    if screenshot_path:
        try:
            img = Image.open(screenshot_path)
            scale_x = img.width / float(display_info['width'])
            scale_y = img.height / float(display_info['height'])
            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π (–æ–±—ã—á–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ)
            scale = max(scale_x, scale_y)
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ
            result = round(scale)
            
            import logging
            logging.debug(f"üìê Scale: screenshot={img.width}x{img.height}, "
                         f"display={display_info['width']}x{display_info['height']}, "
                         f"calculated={scale:.2f}, rounded={result}")
            return result
        except Exception as e:
            import logging
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å scale: {e}")
    
    # –ú–µ—Ç–æ–¥ 2: –≠–≤—Ä–∏—Å—Ç–∏–∫–∞ (fallback)
    # MacBook –æ–±—ã—á–Ω–æ Retina (width < 1920), –≤–Ω–µ—à–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä—ã –æ–±—ã—á–Ω–æ –Ω–µ—Ç
    width = display_info['width']
    if width < 1920:
        return 2.0  # –í–µ—Ä–æ—è—Ç–Ω–æ Retina
    else:
        return 1.0  # –í–µ—Ä–æ—è—Ç–Ω–æ –æ–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä


def logical_to_screenshot_coords(x: float, y: float, scale: float) -> tuple:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    (–¥–ª—è Retina: —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 2)
    
    Args:
        x, y: –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        scale: scale factor (1.0 –∏–ª–∏ 2.0)
        
    Returns:
        tuple: (x_screenshot, y_screenshot)
    """
    return int(x * scale), int(y * scale)


def screenshot_to_logical_coords(x: float, y: float, scale: float) -> tuple:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ
    (–¥–ª—è Retina: –¥–µ–ª–∏–º –Ω–∞ 2)
    
    Args:
        x, y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        scale: scale factor (1.0 –∏–ª–∏ 2.0)
        
    Returns:
        tuple: (x_logical, y_logical)
    """
    return int(x / scale), int(y / scale)


def correct_click_coordinates(vision_x: int, vision_y: int, 
                             display_info: dict, 
                             screenshot_path: str = None) -> tuple:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Vision –¥–ª—è –∫–ª–∏–∫–∞
    
    –ü–†–û–í–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –∏–∑ color_pipette.py:
    - screencapture –¥–∞–µ—Ç –§–ò–ó–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ (2880x1800 –¥–ª—è Retina)
    - Vision –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –≤ –§–ò–ó–ò–ß–ï–°–ö–û–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–∏
    - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ ‚Üí –ª–æ–≥–∏—á–µ—Å–∫–∏–µ: –¥–µ–ª–∏–º –Ω–∞ scale
    - –î–æ–±–∞–≤–ª—è–µ–º offset –º–æ–Ω–∏—Ç–æ—Ä–∞
    
    Args:
        vision_x, vision_y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Vision (–§–ò–ó–ò–ß–ï–°–ö–ò–ï, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞)
        display_info: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–Ω–∏—Ç–æ—Ä–µ (–õ–û–ì–ò–ß–ï–°–ö–û–ï —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
        screenshot_path: –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è scale)
        
    Returns:
        tuple: (abs_x, abs_y, scale) - –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –õ–û–ì–ò–ß–ï–°–ö–ò–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–ª–∏–∫–∞
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º scale (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    scale = get_display_scale(display_info, screenshot_path)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ
    # –î–ª—è Retina: vision_x=1162 ‚Üí logical=1162/2=581
    logical_x, logical_y = screenshot_to_logical_coords(vision_x, vision_y, scale)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∞
    abs_x = display_info['x'] + logical_x
    abs_y = display_info['y'] + logical_y
    
    import logging
    logging.info(f"üìê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: vision=({vision_x},{vision_y}) @ —Ñ–∏–∑, "
                f"scale={scale}x, logical=({logical_x},{logical_y}), "
                f"offset=({display_info['x']},{display_info['y']}), "
                f"‚Üí –∫–ª–∏–∫=({abs_x},{abs_y})")
    
    return abs_x, abs_y, scale


def test_coordinate_correction():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
    print("="*70)
    print("–¢–ï–°–¢ –ö–û–†–†–ï–ö–¢–ò–†–û–í–ö–ò –ö–û–û–†–î–ò–ù–ê–¢")
    print("="*70)
    
    # –ü—Ä–∏–º–µ—Ä 1: Retina –º–æ–Ω–∏—Ç–æ—Ä (MacBook)
    retina_display = {'x': 0, 'y': 0, 'width': 1440, 'height': 900}
    vision_x, vision_y = 1144, 140  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Vision –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ 2880x1800
    
    abs_x, abs_y, scale = correct_click_coordinates(vision_x, vision_y, retina_display)
    print(f"\nüì± Retina –º–æ–Ω–∏—Ç–æ—Ä (1440x900 logical):")
    print(f"   Vision –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ): ({vision_x}, {vision_y})")
    print(f"   Scale factor: {scale}x")
    print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({vision_x/scale:.0f}, {vision_y/scale:.0f})")
    print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –∫–ª–∏–∫–∞: ({abs_x}, {abs_y})")
    
    # –ü—Ä–∏–º–µ—Ä 2: –û–±—ã—á–Ω—ã–π –≤–Ω–µ—à–Ω–∏–π –º–æ–Ω–∏—Ç–æ—Ä
    normal_display = {'x': 1440, 'y': 0, 'width': 1920, 'height': 1080}
    vision_x2, vision_y2 = 960, 120  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç Vision
    
    abs_x2, abs_y2, scale2 = correct_click_coordinates(vision_x2, vision_y2, normal_display)
    print(f"\nüñ•Ô∏è  –û–±—ã—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä (1920x1080):")
    print(f"   Vision –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({vision_x2}, {vision_y2})")
    print(f"   Scale factor: {scale2}x")
    print(f"   –õ–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({vision_x2/scale2:.0f}, {vision_y2/scale2:.0f})")
    print(f"   –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –∫–ª–∏–∫–∞: ({abs_x2}, {abs_y2})")
    
    print(f"\n{'='*70}")


if __name__ == '__main__':
    test_coordinate_correction()
